
#include "DerivLexer"

#include <quex/code_base/analyzer/C-adaptions.h>
/* The file 'multi.i' contains implementations which are the same for all 
 * possibly generated analyzers. If QUEX_OPTION_MULTI is defined, it is
 * NOT supposed to be included here. If not--in which case we have a single
 * analzer--then it is included.                                             */
#include <quex/code_base/single.i>

QUEX_NAMESPACE_MAIN_OPEN
QUEX_NAME(Mode) QUEX_NAME(MAIN) = {
    /* id                */ QUEX_NAME(ModeID_MAIN),
    /* name              */ "MAIN",
#   if      defined(QUEX_OPTION_INDENTATION_TRIGGER) \
       && ! defined(QUEX_OPTION_INDENTATION_DEFAULT_HANDLER)
    /* on_indentation    */ QUEX_NAME(Mode_on_indentation_null_function),
#   endif
    /* on_entry          */ QUEX_NAME(Mode_on_entry_exit_null_function),
    /* on_exit           */ QUEX_NAME(Mode_on_entry_exit_null_function),
#   if      defined(QUEX_OPTION_RUNTIME_MODE_TRANSITION_CHECK)
    /* has_base          */ QUEX_NAME(MAIN_has_base),
    /* has_entry_from    */ QUEX_NAME(MAIN_has_entry_from),
    /* has_exit_to       */ QUEX_NAME(MAIN_has_exit_to),
#   endif
    /* analyzer_function */ QUEX_NAME(MAIN_analyzer_function)
};

QUEX_NAME(Mode)* (QUEX_NAME(mode_db)[__QUEX_SETTING_MAX_MODE_CLASS_N]) = {
    &QUEX_NAME(MAIN)
};
#ifndef __QUEX_INDICATOR_DUMPED_TOKEN_ID_DEFINED
    static QUEX_TYPE_TOKEN_ID    QUEX_NAME_TOKEN(DumpedTokenIdObject);
#endif
#define self  (*(QUEX_TYPE_DERIVED_ANALYZER*)me)
#define __self_result_token_id    QUEX_NAME_TOKEN(DumpedTokenIdObject)

void
QUEX_NAME(MAIN_on_entry)(QUEX_TYPE_ANALYZER* me, const QUEX_NAME(Mode)* FromMode) {
    (void)me;
    (void)FromMode;
#   ifdef QUEX_OPTION_RUNTIME_MODE_TRANSITION_CHECK
    QUEX_NAME(MAIN).has_entry_from(FromMode);
#   endif

}

void
QUEX_NAME(MAIN_on_exit)(QUEX_TYPE_ANALYZER* me, const QUEX_NAME(Mode)* ToMode)  {
    (void)me;
    (void)ToMode;
#   ifdef QUEX_OPTION_RUNTIME_MODE_TRANSITION_CHECK
    QUEX_NAME(MAIN).has_exit_to(ToMode);
#   endif

}

#if defined(QUEX_OPTION_INDENTATION_TRIGGER) 
void
QUEX_NAME(MAIN_on_indentation)(QUEX_TYPE_ANALYZER*    me, 
                                        QUEX_TYPE_INDENTATION  Indentation, 
                                        QUEX_TYPE_LEXATOM*   Begin) {
    (void)me;
    (void)Indentation;
    (void)Begin;
    return;
}
#endif

#ifdef QUEX_OPTION_RUNTIME_MODE_TRANSITION_CHECK
bool
QUEX_NAME(MAIN_has_base)(const QUEX_NAME(Mode)* Mode) {
    (void)Mode;
    return false;
}
bool
QUEX_NAME(MAIN_has_entry_from)(const QUEX_NAME(Mode)* Mode) {
    (void)Mode;

    switch( Mode->id ) {
    case QUEX_NAME(ModeID_MAIN): return true;
    default:
        if( Mode->has_base(&QUEX_NAME(MAIN)) ) return true;
    }
    __QUEX_STD_fprintf(stderr, "mode '%s' is not one of (and not a derived mode of): MAIN, \n", Mode->name);
    __quex_assert(false);
    return false;
    
}
bool
QUEX_NAME(MAIN_has_exit_to)(const QUEX_NAME(Mode)* Mode) {
    (void)Mode;

    switch( Mode->id ) {
    case QUEX_NAME(ModeID_MAIN): return true;
    default:
        if( Mode->has_base(&QUEX_NAME(MAIN)) ) return true;
    }
    __QUEX_STD_fprintf(stderr, "mode '%s' is not one of (and not a derived mode of): MAIN, \n", Mode->name);
    __quex_assert(false);
    return false;
    
}
#endif    
#undef self
#undef __self_result_token_id
QUEX_NAMESPACE_MAIN_CLOSE

/* #include "DerivLexer"*/
QUEX_NAMESPACE_MAIN_OPEN
QUEX_TYPE_LEXATOM  QUEX_LEXEME_NULL_IN_ITS_NAMESPACE = (QUEX_TYPE_LEXATOM)0;
#ifdef      __QUEX_COUNT_VOID
#   undef   __QUEX_COUNT_VOID
#endif
#ifdef      __QUEX_OPTION_COUNTER
#    define __QUEX_COUNT_VOID(ME, BEGIN, END) \
            do {                              \
                QUEX_NAME(MAIN_counter)((ME), (BEGIN), (END));     \
                __quex_debug_counter();       \
            } while(0)
#else
#    define __QUEX_COUNT_VOID(ME, BEGIN, END) /* empty */
#endif
#ifdef __QUEX_OPTION_COUNTER
static void
QUEX_NAME(MAIN_counter)(QUEX_TYPE_ANALYZER* me, QUEX_TYPE_LEXATOM* LexemeBegin, QUEX_TYPE_LEXATOM* LexemeEnd)
{
#   define self (*me)
/*  'QUEX_GOTO_STATE' requires 'QUEX_LABEL_STATE_ROUTER' */
#   define QUEX_LABEL_STATE_ROUTER _27
    QUEX_TYPE_LEXATOM              input                          = (QUEX_TYPE_LEXATOM)(0x00);
    QUEX_TYPE_GOTO_LABEL           target_state_else_index        = QUEX_GOTO_LABEL_VOID;
    QUEX_TYPE_GOTO_LABEL           target_state_index             = QUEX_GOTO_LABEL_VOID;
    QUEX_TYPE_LEXATOM*             character_begin_p              = (QUEX_TYPE_LEXATOM*)0x0;
    (void)me;
    __QUEX_IF_COUNT_SHIFT_VALUES();
    /* Allow LexemeBegin == LexemeEnd (e.g. END_OF_STREAM)
     * => Caller does not need to check
     * BUT, if so quit immediately after 'shift values'. */
    __quex_assert(LexemeBegin <= LexemeEnd);
    if(LexemeBegin == LexemeEnd) return;
    me->buffer._read_p = LexemeBegin;

    /* (701 from BEFORE_ENTRY)  */
    input = *(me->buffer._read_p);

_13:
    character_begin_p = (me->buffer._read_p);


    __quex_debug("Init State\n");
    __quex_debug_state(701);
if( input < 0xB ) {
if     ( input == 0xA )  goto _2;
else if( input == 0x9 )  goto _3;
else                     goto _5;
} else {
if     ( input < 0xD800 )  goto _5;
else if( input < 0xDC00 )  goto _4;
else if( input < 0xE000 )  goto _6;
else                       goto _5;
}


    __quex_assert_no_passage();
_11:
    /* (701 from 707)  */
    goto _13;


    __quex_assert_no_passage();
_8:
    /* (DROP_OUT from 703)  */
    goto _15;

    __quex_debug("Drop-Out Catcher\n");


    __quex_assert_no_passage();
_10:
    /* (DROP_OUT from 705)  */
    goto _16;


    __quex_assert_no_passage();
_7:
    /* (DROP_OUT from 702)  */
    goto _17;


    __quex_assert_no_passage();
_9:
    /* (DROP_OUT from 704)  */
    goto _18;


    __quex_assert_no_passage();
_2:
    /* (704 from 701)  */
    ++(me->buffer._read_p);

    input = *(me->buffer._read_p);


    __quex_debug_state(704);
goto _9;


    __quex_assert_no_passage();
_3:
    /* (705 from 701)  */
    ++(me->buffer._read_p);

    input = *(me->buffer._read_p);


    __quex_debug_state(705);
goto _10;


    __quex_assert_no_passage();
_4:
    /* (706 from 701)  */
    ++(me->buffer._read_p);

    input = *(me->buffer._read_p);


    __quex_debug_state(706);
if     ( input >= 0xE000 )  goto _6;
else if( input >= 0xDC00 )  goto _5;
else                        goto _6;


    __quex_assert_no_passage();
_5:
    /* (702 from 706) (702 from 701)  */

    ++(me->buffer._read_p);

    input = *(me->buffer._read_p);


    __quex_debug_state(702);
goto _7;


    __quex_assert_no_passage();
_6:
    /* (703 from 701) (703 from 706)  */

    ++(me->buffer._read_p);

    input = *(me->buffer._read_p);


    __quex_debug_state(703);
goto _8;

    /* (*) Terminal states _______________________________________________________
     *
     * States that implement actions of the 'winner patterns.                     */
_18:
    __quex_debug("* TERMINAL LINE\n");
__QUEX_IF_COUNT_LINES_ADD((size_t)1);

    __QUEX_IF_COUNT_COLUMNS((me->counter._column_number_at_end) = (size_t)1);

if( me->buffer._read_p != LexemeEnd ) goto _11;

goto _0;

_16:
    __quex_debug("* TERMINAL GRID\n");
__QUEX_IF_COUNT_COLUMNS(self.counter._column_number_at_end -= 1);
__QUEX_IF_COUNT_COLUMNS(self.counter._column_number_at_end &= ~ ((size_t)0x3));
__QUEX_IF_COUNT_COLUMNS(self.counter._column_number_at_end += 4 + 1);

if( me->buffer._read_p != LexemeEnd ) goto _11;

goto _0;

_17:
    __quex_debug("* TERMINAL COLUMN\n");
__QUEX_IF_COUNT_COLUMNS_ADD((size_t)1);

if( me->buffer._read_p != LexemeEnd ) goto _11;

goto _0;

_26:
    __quex_debug("* TERMINAL <BEYOND>\n");
    (me->buffer._read_p) = character_begin_p;

goto _0;

if(0) {
    /* Avoid unreferenced labels. */
    goto _18;
    goto _16;
    goto _17;
    goto _26;
}
_15: /* TERMINAL: BAD_LEXATOM */
;
_28: /* TERMINAL: FAILURE     */
goto _26;
_0:
     __quex_assert(me->buffer._read_p == LexemeEnd); /* Otherwise, lexeme violates codec character boundaries. */
    return;
#   ifndef QUEX_OPTION_COMPUTED_GOTOS
    __quex_assert_no_passage();
_27:
#   endif /* QUEX_OPTION_COMPUTED_GOTOS */
#   undef self
#   undef QUEX_LABEL_STATE_ROUTER
#    if ! defined(QUEX_OPTION_COMPUTED_GOTOS)
     goto _27; /* in QUEX_GOTO_STATE       */
     goto _15; /* to BAD_LEXATOM           */
#    endif
    /* Avoid compiler warning: Unused label for 'TERMINAL <BEYOND>' */
    goto _26;
    goto _28;
    (void)target_state_index;
    (void)target_state_else_index;
}
#endif /* __QUEX_OPTION_COUNTER */

#include <quex/code_base/analyzer/struct/basic>
#include <quex/code_base/buffer/Buffer>
#ifdef QUEX_OPTION_TOKEN_POLICY_QUEUE
#   include <quex/code_base/token/TokenQueue>
#endif

#ifdef    CONTINUE
#   undef CONTINUE
#endif
#define   CONTINUE do { goto _1; } while(0)

#ifdef    RETURN
#   undef RETURN
#endif
#define   RETURN   do { goto _3; } while(0)

__QUEX_TYPE_ANALYZER_RETURN_VALUE  
QUEX_NAME(MAIN_analyzer_function)(QUEX_TYPE_ANALYZER* me) 
{
    /* NOTE: Different modes correspond to different analyzer functions. The 
     *       analyzer functions are all located inside the main class as static
     *       functions. That means, they are something like 'globals'. They 
     *       receive a pointer to the lexical analyzer, since static members do
     *       not have access to the 'this' pointer.                          */
#   if defined(QUEX_OPTION_TOKEN_POLICY_SINGLE)
    register QUEX_TYPE_TOKEN_ID __self_result_token_id 
           = (QUEX_TYPE_TOKEN_ID)__QUEX_SETTING_TOKEN_ID_UNINITIALIZED;
#   endif
#   ifdef     self
#       undef self
#   endif
#   define self (*((QUEX_TYPE_ANALYZER*)me))
/*  'QUEX_GOTO_STATE' requires 'QUEX_LABEL_STATE_ROUTER' */
#   define QUEX_LABEL_STATE_ROUTER _258
#   define MAIN    (QUEX_NAME(MAIN))

    /* Lexeme setup: 
     *
     * There is a temporary zero stored at the end of each lexeme, if the action 
     * references to the 'Lexeme'. 'LexemeNull' provides a reference to an empty
     * zero terminated string.                                                    */
#if defined(QUEX_OPTION_ASSERTS)
#   define Lexeme       QUEX_NAME(access_Lexeme)((const char*)__FILE__, (size_t)__LINE__, &me->buffer)
#   define LexemeBegin  QUEX_NAME(access_LexemeBegin)((const char*)__FILE__, (size_t)__LINE__, &me->buffer)
#   define LexemeL      QUEX_NAME(access_LexemeL)((const char*)__FILE__, (size_t)__LINE__, &me->buffer)
#   define LexemeEnd    QUEX_NAME(access_LexemeEnd)((const char*)__FILE__, (size_t)__LINE__, &me->buffer)
#else
#   define Lexeme       (me->buffer._lexeme_start_p)
#   define LexemeBegin  Lexeme
#   define LexemeL      ((size_t)(me->buffer._read_p - me->buffer._lexeme_start_p))
#   define LexemeEnd    me->buffer._read_p
#endif

#define LexemeNull      (&QUEX_LEXEME_NULL)
    QUEX_TYPE_LEXATOM*             character_begin_p              = (QUEX_TYPE_LEXATOM*)0x0;
    QUEX_TYPE_GOTO_LABEL           target_state_else_index        = QUEX_GOTO_LABEL_VOID;
    const size_t                   PositionRegisterN              = (size_t)0;
    QUEX_TYPE_LEXATOM**            position                       = 0x0;
    QUEX_TYPE_LEXATOM              input                          = (QUEX_TYPE_LEXATOM)(0x00);
    QUEX_TYPE_GOTO_LABEL           target_state_index             = QUEX_GOTO_LABEL_VOID;
#   ifdef QUEX_OPTION_COLUMN_NUMBER_COUNTING
    QUEX_TYPE_LEXATOM*             reference_p                    = (QUEX_TYPE_LEXATOM*)0x0;
#   endif /* QUEX_OPTION_COLUMN_NUMBER_COUNTING */

    /* Post context positions do not have to be reset or initialized. If a state
     * is reached which is associated with 'end of post context' it is clear what
     * post context is meant. This results from the ways the state machine is 
     * constructed. Post context position's live cycle:
     *
     * (1)   unitialized (don't care)
     * (1.b) on buffer reload it may, or may not be adapted (don't care)
     * (2)   when a post context begin state is passed, then it is **SET** (now: take care)
     * (2.b) on buffer reload it **is adapted**.
     * (3)   when a terminal state of the post context is reached (which can only be reached
     *       for that particular post context), then the post context position is used
     *       to reset the input position.                                              */
#   if    defined(QUEX_OPTION_AUTOMATIC_ANALYSIS_CONTINUATION_ON_MODE_CHANGE) \
       || defined(QUEX_OPTION_ASSERTS)
    me->DEBUG_analyzer_function_at_entry = me->current_analyzer_function;
#   endif
_257:
    me->buffer._lexeme_start_p = me->buffer._read_p;
    QUEX_LEXEME_TERMINATING_ZERO_UNDO(&me->buffer);
_4:
    /* (544 from RELOAD_FORWARD) (544 from BEFORE_ENTRY)  */

    input = *(me->buffer._read_p);


    __quex_debug("Init State\n");
    __quex_debug_state(544);
if( input < 0x1DC0 ) {
if( input < 0xF8 ) {
switch( input ) {
case 0x0: goto _71;
case 0x9: goto _14;
case 0xA: goto _10;
case 0x20: goto _18;
case 0x28: goto _23;
case 0x29: goto _6;
case 0x2A: goto _12;
case 0x2B: goto _20;
case 0x2D: goto _5;
case 0x2E: goto _16;
case 0x2F: goto _15;
case 0x30: case 0x31: case 0x32: case 0x33: case 0x34: case 0x35: case 0x36: case 0x37: 
case 0x38: case 0x39: goto _19;
case 0x41: case 0x42: case 0x43: case 0x44: case 0x45: case 0x46: case 0x47: 
case 0x48: case 0x49: case 0x4A: case 0x4B: case 0x4C: case 0x4D: case 0x4E: case 0x4F: 
case 0x50: case 0x51: case 0x52: case 0x53: case 0x54: case 0x55: case 0x56: case 0x57: 
case 0x58: case 0x59: case 0x5A: goto _8;
case 0x5E: goto _7;
case 0x61: case 0x62: goto _8;
case 0x63: goto _13;
case 0x64: goto _8;
case 0x65: goto _22;
case 0x66: case 0x67: 
case 0x68: case 0x69: case 0x6A: case 0x6B: case 0x6C: case 0x6D: case 0x6E: case 0x6F: 
case 0x70: case 0x71: case 0x72: goto _8;
case 0x73: goto _21;
case 0x74: goto _9;
case 0x75: case 0x76: case 0x77: case 0x78: case 0x79: case 0x7A: 
case 0xAA: 
case 0xBA: 
case 0xC0: case 0xC1: case 0xC2: case 0xC3: case 0xC4: case 0xC5: case 0xC6: case 0xC7: 
case 0xC8: case 0xC9: case 0xCA: case 0xCB: case 0xCC: case 0xCD: case 0xCE: case 0xCF: 
case 0xD0: case 0xD1: case 0xD2: case 0xD3: case 0xD4: case 0xD5: case 0xD6: 
case 0xD8: case 0xD9: case 0xDA: case 0xDB: case 0xDC: case 0xDD: case 0xDE: case 0xDF: 
case 0xE0: case 0xE1: case 0xE2: case 0xE3: case 0xE4: case 0xE5: case 0xE6: case 0xE7: 
case 0xE8: case 0xE9: case 0xEA: case 0xEB: case 0xEC: case 0xED: case 0xEE: case 0xEF: 
case 0xF0: case 0xF1: case 0xF2: case 0xF3: case 0xF4: case 0xF5: case 0xF6: goto _8;
default: goto _41;
}
} else {
if( input < 0x3A2 ) {
switch( input ) {
case 0x2B9: case 0x2BA: case 0x2BB: case 0x2BC: case 0x2BD: case 0x2BE: case 0x2BF: 
case 0x2C0: case 0x2C1: case 0x2C2: case 0x2C3: case 0x2C4: case 0x2C5: case 0x2C6: case 0x2C7: 
case 0x2C8: case 0x2C9: case 0x2CA: case 0x2CB: case 0x2CC: case 0x2CD: case 0x2CE: case 0x2CF: 
case 0x2D0: case 0x2D1: case 0x2D2: case 0x2D3: case 0x2D4: case 0x2D5: case 0x2D6: case 0x2D7: 
case 0x2D8: case 0x2D9: case 0x2DA: case 0x2DB: case 0x2DC: case 0x2DD: case 0x2DE: case 0x2DF: 
case 0x2E5: case 0x2E6: case 0x2E7: 
case 0x2E8: case 0x2E9: case 0x2EA: case 0x2EB: case 0x2EC: case 0x2ED: case 0x2EE: case 0x2EF: 
case 0x2F0: case 0x2F1: case 0x2F2: case 0x2F3: case 0x2F4: case 0x2F5: case 0x2F6: case 0x2F7: 
case 0x2F8: case 0x2F9: case 0x2FA: case 0x2FB: case 0x2FC: case 0x2FD: case 0x2FE: case 0x2FF: 
case 0x300: case 0x301: case 0x302: case 0x303: case 0x304: case 0x305: case 0x306: case 0x307: 
case 0x308: case 0x309: case 0x30A: case 0x30B: case 0x30C: case 0x30D: case 0x30E: case 0x30F: 
case 0x310: case 0x311: case 0x312: case 0x313: case 0x314: case 0x315: case 0x316: case 0x317: 
case 0x318: case 0x319: case 0x31A: case 0x31B: case 0x31C: case 0x31D: case 0x31E: case 0x31F: 
case 0x320: case 0x321: case 0x322: case 0x323: case 0x324: case 0x325: case 0x326: case 0x327: 
case 0x328: case 0x329: case 0x32A: case 0x32B: case 0x32C: case 0x32D: case 0x32E: case 0x32F: 
case 0x330: case 0x331: case 0x332: case 0x333: case 0x334: case 0x335: case 0x336: case 0x337: 
case 0x338: case 0x339: case 0x33A: case 0x33B: case 0x33C: case 0x33D: case 0x33E: case 0x33F: 
case 0x340: case 0x341: case 0x342: case 0x343: case 0x344: case 0x345: case 0x346: case 0x347: 
case 0x348: case 0x349: case 0x34A: case 0x34B: case 0x34C: case 0x34D: case 0x34E: case 0x34F: 
case 0x350: case 0x351: case 0x352: case 0x353: case 0x354: case 0x355: case 0x356: case 0x357: 
case 0x358: case 0x359: case 0x35A: case 0x35B: case 0x35C: case 0x35D: case 0x35E: case 0x35F: 
case 0x360: case 0x361: case 0x362: case 0x363: case 0x364: case 0x365: case 0x366: case 0x367: 
case 0x368: case 0x369: case 0x36A: case 0x36B: case 0x36C: case 0x36D: case 0x36E: case 0x36F: goto _41;
case 0x370: case 0x371: case 0x372: case 0x373: goto _11;
case 0x374: case 0x375: goto _41;
case 0x376: case 0x377: goto _11;
case 0x378: case 0x379: goto _41;
case 0x37A: case 0x37B: case 0x37C: case 0x37D: goto _11;
case 0x37E: goto _41;
case 0x37F: goto _11;
case 0x380: case 0x381: case 0x382: case 0x383: case 0x384: case 0x385: goto _41;
case 0x386: goto _11;
case 0x387: goto _41;
case 0x388: case 0x389: case 0x38A: goto _11;
case 0x38B: goto _41;
case 0x38C: goto _11;
case 0x38D: goto _41;
case 0x38E: case 0x38F: 
case 0x390: case 0x391: case 0x392: case 0x393: case 0x394: case 0x395: case 0x396: case 0x397: 
case 0x398: case 0x399: case 0x39A: case 0x39B: case 0x39C: case 0x39D: case 0x39E: case 0x39F: 
case 0x3A0: case 0x3A1: goto _11;
default: goto _8;
}
} else {
if( input < 0x1D26 ) {
switch( input ) {
case 0x3A3: case 0x3A4: case 0x3A5: case 0x3A6: case 0x3A7: 
case 0x3A8: case 0x3A9: case 0x3AA: case 0x3AB: case 0x3AC: case 0x3AD: case 0x3AE: case 0x3AF: 
case 0x3B0: case 0x3B1: case 0x3B2: case 0x3B3: case 0x3B4: case 0x3B5: case 0x3B6: case 0x3B7: 
case 0x3B8: case 0x3B9: case 0x3BA: case 0x3BB: case 0x3BC: case 0x3BD: case 0x3BE: case 0x3BF: goto _11;
case 0x3C0: goto _17;
case 0x3C1: case 0x3C2: case 0x3C3: case 0x3C4: case 0x3C5: case 0x3C6: case 0x3C7: 
case 0x3C8: case 0x3C9: case 0x3CA: case 0x3CB: case 0x3CC: case 0x3CD: case 0x3CE: case 0x3CF: 
case 0x3D0: case 0x3D1: case 0x3D2: case 0x3D3: case 0x3D4: case 0x3D5: case 0x3D6: case 0x3D7: 
case 0x3D8: case 0x3D9: case 0x3DA: case 0x3DB: case 0x3DC: case 0x3DD: case 0x3DE: case 0x3DF: 
case 0x3E0: case 0x3E1: 
case 0x3F0: case 0x3F1: case 0x3F2: case 0x3F3: case 0x3F4: case 0x3F5: 
case 0x3F7: 
case 0x3F8: case 0x3F9: case 0x3FA: case 0x3FB: case 0x3FC: case 0x3FD: case 0x3FE: case 0x3FF: goto _11;
case 0x1D00: case 0x1D01: case 0x1D02: case 0x1D03: case 0x1D04: case 0x1D05: case 0x1D06: case 0x1D07: 
case 0x1D08: case 0x1D09: case 0x1D0A: case 0x1D0B: case 0x1D0C: case 0x1D0D: case 0x1D0E: case 0x1D0F: 
case 0x1D10: case 0x1D11: case 0x1D12: case 0x1D13: case 0x1D14: case 0x1D15: case 0x1D16: case 0x1D17: 
case 0x1D18: case 0x1D19: case 0x1D1A: case 0x1D1B: case 0x1D1C: case 0x1D1D: case 0x1D1E: case 0x1D1F: 
case 0x1D20: case 0x1D21: case 0x1D22: case 0x1D23: case 0x1D24: case 0x1D25: goto _8;
default: goto _41;
}
} else {
switch( input ) {
case 0x1D26: case 0x1D27: case 0x1D28: case 0x1D29: case 0x1D2A: goto _11;
case 0x1D2B: goto _41;
case 0x1D5D: case 0x1D5E: case 0x1D5F: case 0x1D60: case 0x1D61: 
case 0x1D66: case 0x1D67: case 0x1D68: case 0x1D69: case 0x1D6A: goto _11;
case 0x1D78: goto _41;
case 0x1DBF: goto _11;
default: goto _8;
}
}
}
}
} else {
if( input < 0x1FF6 ) {
if( input < 0x1F7E ) {
switch( input ) {
case 0x1DC0: case 0x1DC1: case 0x1DC2: case 0x1DC3: case 0x1DC4: case 0x1DC5: case 0x1DC6: case 0x1DC7: 
case 0x1DC8: case 0x1DC9: case 0x1DCA: case 0x1DCB: case 0x1DCC: case 0x1DCD: case 0x1DCE: case 0x1DCF: 
case 0x1DD0: case 0x1DD1: case 0x1DD2: case 0x1DD3: case 0x1DD4: case 0x1DD5: case 0x1DD6: case 0x1DD7: 
case 0x1DD8: case 0x1DD9: case 0x1DDA: case 0x1DDB: case 0x1DDC: case 0x1DDD: case 0x1DDE: case 0x1DDF: 
case 0x1DE0: case 0x1DE1: case 0x1DE2: case 0x1DE3: case 0x1DE4: case 0x1DE5: case 0x1DE6: case 0x1DE7: 
case 0x1DE8: case 0x1DE9: case 0x1DEA: case 0x1DEB: case 0x1DEC: case 0x1DED: case 0x1DEE: case 0x1DEF: 
case 0x1DF0: case 0x1DF1: case 0x1DF2: case 0x1DF3: case 0x1DF4: case 0x1DF5: case 0x1DF6: case 0x1DF7: 
case 0x1DF8: case 0x1DF9: case 0x1DFA: case 0x1DFB: case 0x1DFC: case 0x1DFD: case 0x1DFE: case 0x1DFF: goto _41;
case 0x1F00: case 0x1F01: case 0x1F02: case 0x1F03: case 0x1F04: case 0x1F05: case 0x1F06: case 0x1F07: 
case 0x1F08: case 0x1F09: case 0x1F0A: case 0x1F0B: case 0x1F0C: case 0x1F0D: case 0x1F0E: case 0x1F0F: 
case 0x1F10: case 0x1F11: case 0x1F12: case 0x1F13: case 0x1F14: case 0x1F15: goto _11;
case 0x1F16: case 0x1F17: goto _41;
case 0x1F18: case 0x1F19: case 0x1F1A: case 0x1F1B: case 0x1F1C: case 0x1F1D: goto _11;
case 0x1F1E: case 0x1F1F: goto _41;
case 0x1F20: case 0x1F21: case 0x1F22: case 0x1F23: case 0x1F24: case 0x1F25: case 0x1F26: case 0x1F27: 
case 0x1F28: case 0x1F29: case 0x1F2A: case 0x1F2B: case 0x1F2C: case 0x1F2D: case 0x1F2E: case 0x1F2F: 
case 0x1F30: case 0x1F31: case 0x1F32: case 0x1F33: case 0x1F34: case 0x1F35: case 0x1F36: case 0x1F37: 
case 0x1F38: case 0x1F39: case 0x1F3A: case 0x1F3B: case 0x1F3C: case 0x1F3D: case 0x1F3E: case 0x1F3F: 
case 0x1F40: case 0x1F41: case 0x1F42: case 0x1F43: case 0x1F44: case 0x1F45: goto _11;
case 0x1F46: case 0x1F47: goto _41;
case 0x1F48: case 0x1F49: case 0x1F4A: case 0x1F4B: case 0x1F4C: case 0x1F4D: goto _11;
case 0x1F4E: case 0x1F4F: goto _41;
case 0x1F50: case 0x1F51: case 0x1F52: case 0x1F53: case 0x1F54: case 0x1F55: case 0x1F56: case 0x1F57: goto _11;
case 0x1F58: goto _41;
case 0x1F59: goto _11;
case 0x1F5A: goto _41;
case 0x1F5B: goto _11;
case 0x1F5C: goto _41;
case 0x1F5D: goto _11;
case 0x1F5E: goto _41;
case 0x1F5F: 
case 0x1F60: case 0x1F61: case 0x1F62: case 0x1F63: case 0x1F64: case 0x1F65: case 0x1F66: case 0x1F67: 
case 0x1F68: case 0x1F69: case 0x1F6A: case 0x1F6B: case 0x1F6C: case 0x1F6D: case 0x1F6E: case 0x1F6F: 
case 0x1F70: case 0x1F71: case 0x1F72: case 0x1F73: case 0x1F74: case 0x1F75: case 0x1F76: case 0x1F77: 
case 0x1F78: case 0x1F79: case 0x1F7A: case 0x1F7B: case 0x1F7C: case 0x1F7D: goto _11;
default: goto _8;
}
} else {
switch( input ) {
case 0x1F7E: case 0x1F7F: 
case 0x1FB5: 
case 0x1FBD: 
case 0x1FBF: case 0x1FC0: case 0x1FC1: 
case 0x1FC5: 
case 0x1FCD: case 0x1FCE: case 0x1FCF: 
case 0x1FD4: case 0x1FD5: 
case 0x1FDC: case 0x1FDD: case 0x1FDE: case 0x1FDF: 
case 0x1FED: case 0x1FEE: case 0x1FEF: case 0x1FF0: case 0x1FF1: 
case 0x1FF5: goto _41;
default: goto _11;
}
}
} else {
if( input < 0x2C80 ) {
switch( input ) {
case 0x1FF6: case 0x1FF7: case 0x1FF8: case 0x1FF9: case 0x1FFA: case 0x1FFB: case 0x1FFC: goto _11;
case 0x2071: 
case 0x207F: 
case 0x2090: case 0x2091: case 0x2092: case 0x2093: case 0x2094: case 0x2095: case 0x2096: case 0x2097: 
case 0x2098: case 0x2099: case 0x209A: case 0x209B: case 0x209C: goto _8;
case 0x2126: goto _11;
case 0x212A: case 0x212B: 
case 0x2132: 
case 0x214E: 
case 0x2160: case 0x2161: case 0x2162: case 0x2163: case 0x2164: case 0x2165: case 0x2166: case 0x2167: 
case 0x2168: case 0x2169: case 0x216A: case 0x216B: case 0x216C: case 0x216D: case 0x216E: case 0x216F: 
case 0x2170: case 0x2171: case 0x2172: case 0x2173: case 0x2174: case 0x2175: case 0x2176: case 0x2177: 
case 0x2178: case 0x2179: case 0x217A: case 0x217B: case 0x217C: case 0x217D: case 0x217E: case 0x217F: 
case 0x2180: case 0x2181: case 0x2182: case 0x2183: case 0x2184: case 0x2185: case 0x2186: case 0x2187: 
case 0x2188: 
case 0x2C60: case 0x2C61: case 0x2C62: case 0x2C63: case 0x2C64: case 0x2C65: case 0x2C66: case 0x2C67: 
case 0x2C68: case 0x2C69: case 0x2C6A: case 0x2C6B: case 0x2C6C: case 0x2C6D: case 0x2C6E: case 0x2C6F: 
case 0x2C70: case 0x2C71: case 0x2C72: case 0x2C73: case 0x2C74: case 0x2C75: case 0x2C76: case 0x2C77: 
case 0x2C78: case 0x2C79: case 0x2C7A: case 0x2C7B: case 0x2C7C: case 0x2C7D: case 0x2C7E: case 0x2C7F: goto _8;
default: goto _41;
}
} else {
if( input < 0xAB5B ) {
switch( input ) {
case 0xA722: case 0xA723: case 0xA724: case 0xA725: case 0xA726: case 0xA727: 
case 0xA728: case 0xA729: case 0xA72A: case 0xA72B: case 0xA72C: case 0xA72D: case 0xA72E: case 0xA72F: 
case 0xA730: case 0xA731: case 0xA732: case 0xA733: case 0xA734: case 0xA735: case 0xA736: case 0xA737: 
case 0xA738: case 0xA739: case 0xA73A: case 0xA73B: case 0xA73C: case 0xA73D: case 0xA73E: case 0xA73F: 
case 0xA740: case 0xA741: case 0xA742: case 0xA743: case 0xA744: case 0xA745: case 0xA746: case 0xA747: 
case 0xA748: case 0xA749: case 0xA74A: case 0xA74B: case 0xA74C: case 0xA74D: case 0xA74E: case 0xA74F: 
case 0xA750: case 0xA751: case 0xA752: case 0xA753: case 0xA754: case 0xA755: case 0xA756: case 0xA757: 
case 0xA758: case 0xA759: case 0xA75A: case 0xA75B: case 0xA75C: case 0xA75D: case 0xA75E: case 0xA75F: 
case 0xA760: case 0xA761: case 0xA762: case 0xA763: case 0xA764: case 0xA765: case 0xA766: case 0xA767: 
case 0xA768: case 0xA769: case 0xA76A: case 0xA76B: case 0xA76C: case 0xA76D: case 0xA76E: case 0xA76F: 
case 0xA770: case 0xA771: case 0xA772: case 0xA773: case 0xA774: case 0xA775: case 0xA776: case 0xA777: 
case 0xA778: case 0xA779: case 0xA77A: case 0xA77B: case 0xA77C: case 0xA77D: case 0xA77E: case 0xA77F: 
case 0xA780: case 0xA781: case 0xA782: case 0xA783: case 0xA784: case 0xA785: case 0xA786: case 0xA787: 
case 0xA78B: case 0xA78C: case 0xA78D: case 0xA78E: case 0xA78F: 
case 0xA790: case 0xA791: case 0xA792: case 0xA793: case 0xA794: case 0xA795: case 0xA796: case 0xA797: 
case 0xA798: case 0xA799: case 0xA79A: case 0xA79B: case 0xA79C: case 0xA79D: case 0xA79E: case 0xA79F: 
case 0xA7A0: case 0xA7A1: case 0xA7A2: case 0xA7A3: case 0xA7A4: case 0xA7A5: case 0xA7A6: case 0xA7A7: 
case 0xA7A8: case 0xA7A9: case 0xA7AA: case 0xA7AB: case 0xA7AC: case 0xA7AD: 
case 0xA7B0: case 0xA7B1: case 0xA7B2: case 0xA7B3: case 0xA7B4: case 0xA7B5: case 0xA7B6: case 0xA7B7: 
case 0xA7F7: 
case 0xA7F8: case 0xA7F9: case 0xA7FA: case 0xA7FB: case 0xA7FC: case 0xA7FD: case 0xA7FE: case 0xA7FF: 
case 0xAB30: case 0xAB31: case 0xAB32: case 0xAB33: case 0xAB34: case 0xAB35: case 0xAB36: case 0xAB37: 
case 0xAB38: case 0xAB39: case 0xAB3A: case 0xAB3B: case 0xAB3C: case 0xAB3D: case 0xAB3E: case 0xAB3F: 
case 0xAB40: case 0xAB41: case 0xAB42: case 0xAB43: case 0xAB44: case 0xAB45: case 0xAB46: case 0xAB47: 
case 0xAB48: case 0xAB49: case 0xAB4A: case 0xAB4B: case 0xAB4C: case 0xAB4D: case 0xAB4E: case 0xAB4F: 
case 0xAB50: case 0xAB51: case 0xAB52: case 0xAB53: case 0xAB54: case 0xAB55: case 0xAB56: case 0xAB57: 
case 0xAB58: case 0xAB59: case 0xAB5A: goto _8;
default: goto _41;
}
} else {
switch( input ) {
case 0xAB5C: case 0xAB5D: case 0xAB5E: case 0xAB5F: 
case 0xAB60: case 0xAB61: case 0xAB62: case 0xAB63: case 0xAB64: goto _8;
case 0xAB65: goto _11;
case 0xFB00: case 0xFB01: case 0xFB02: case 0xFB03: case 0xFB04: case 0xFB05: case 0xFB06: 
case 0xFF21: case 0xFF22: case 0xFF23: case 0xFF24: case 0xFF25: case 0xFF26: case 0xFF27: 
case 0xFF28: case 0xFF29: case 0xFF2A: case 0xFF2B: case 0xFF2C: case 0xFF2D: case 0xFF2E: case 0xFF2F: 
case 0xFF30: case 0xFF31: case 0xFF32: case 0xFF33: case 0xFF34: case 0xFF35: case 0xFF36: case 0xFF37: 
case 0xFF38: case 0xFF39: case 0xFF3A: 
case 0xFF41: case 0xFF42: case 0xFF43: case 0xFF44: case 0xFF45: case 0xFF46: case 0xFF47: 
case 0xFF48: case 0xFF49: case 0xFF4A: case 0xFF4B: case 0xFF4C: case 0xFF4D: case 0xFF4E: case 0xFF4F: 
case 0xFF50: case 0xFF51: case 0xFF52: case 0xFF53: case 0xFF54: case 0xFF55: case 0xFF56: case 0xFF57: 
case 0xFF58: case 0xFF59: case 0xFF5A: goto _8;
default: goto _41;
}
}
}
}
}


    __quex_assert_no_passage();
_45:
    /* (DROP_OUT from 579) (DROP_OUT from 561) (DROP_OUT from 548) (DROP_OUT from 549) (DROP_OUT from 577) (DROP_OUT from 553) (DROP_OUT from 564)  */

    goto _128;
_126:
    __quex_debug("Drop-Out Catcher\n");


    __quex_assert_no_passage();
_68:
    /* (DROP_OUT from 578)  */
    goto _129;


    __quex_assert_no_passage();
_55:
    /* (DROP_OUT from 560)  */
    goto _131;


    __quex_assert_no_passage();
_48:
    /* (DROP_OUT from 552)  */
    goto _132;


    __quex_assert_no_passage();
_57:
    /* (DROP_OUT from 563)  */
    goto _133;


    __quex_assert_no_passage();
_51:
    /* (DROP_OUT from 556)  */
    goto _134;


    __quex_assert_no_passage();
_44:
    /* (DROP_OUT from 547)  */
    goto _135;


    __quex_assert_no_passage();
_69:
    /* (DROP_OUT from 580)  */
    goto _136;


    __quex_assert_no_passage();
_62:
    /* (DROP_OUT from 569)  */
    goto _137;


    __quex_assert_no_passage();
_56:
    /* (DROP_OUT from 562)  */
    goto _138;


    __quex_assert_no_passage();
_65:
    /* (DROP_OUT from 575) (DROP_OUT from 573)  */
    goto _139;


    __quex_assert_no_passage();
_58:
    /* (DROP_OUT from 565)  */
    goto _140;


    __quex_assert_no_passage();
_52:
    /* (DROP_OUT from 557)  */
    goto _141;


    __quex_assert_no_passage();
_59:
    /* (DROP_OUT from 572) (DROP_OUT from 566)  */
    goto _142;


    __quex_assert_no_passage();
_53:
    /* (DROP_OUT from 558)  */
    goto _144;


    __quex_assert_no_passage();
_46:
    /* (DROP_OUT from 550)  */
    goto _145;


    __quex_assert_no_passage();
_49:
    /* (DROP_OUT from 554)  */
    goto _146;


    __quex_assert_no_passage();
_42:
    /* (DROP_OUT from 545)  */
    goto _147;


    __quex_assert_no_passage();
_54:
    /* (DROP_OUT from 559)  */
    goto _130;


    __quex_assert_no_passage();
_47:
    /* (DROP_OUT from 551)  */
    goto _148;


    __quex_assert_no_passage();
_50:
    /* (DROP_OUT from 555)  */
    goto _149;


    __quex_assert_no_passage();
_43:
    /* (DROP_OUT from 546)  */
    goto _150;


    __quex_assert_no_passage();
_61:
    /* (DROP_OUT from 568)  */
        me->buffer._read_p -= 2;
goto _130;
    goto _126;


    __quex_assert_no_passage();
_63:
    /* (DROP_OUT from 570)  */
        me->buffer._read_p -= 1;
goto _142;
    goto _126;


    __quex_assert_no_passage();
_41:
    /* (DROP_OUT from 544)  */
        me->buffer._read_p = me->buffer._lexeme_start_p + 1;
goto _143;
    goto _126;


    __quex_assert_no_passage();
_66:
    /* (DROP_OUT from 574)  */
        me->buffer._read_p -= 1;
goto _139;
    goto _126;


    __quex_assert_no_passage();
_64:
    /* (DROP_OUT from 571)  */
        me->buffer._read_p -= 2;
goto _142;
    goto _126;


    __quex_assert_no_passage();
_67:
    /* (DROP_OUT from 576)  */
        me->buffer._read_p -= 2;
goto _139;
    goto _126;


    __quex_assert_no_passage();
_60:
    /* (DROP_OUT from 567)  */
        me->buffer._read_p -= 1;
goto _130;
    goto _126;


    __quex_assert_no_passage();
_5:
    /* (545 from 544)  */
    ++(me->buffer._read_p);

    input = *(me->buffer._read_p);


    __quex_debug_state(545);
goto _42;


    __quex_assert_no_passage();
_6:
    /* (546 from 544)  */
    ++(me->buffer._read_p);

    input = *(me->buffer._read_p);


    __quex_debug_state(546);
goto _43;


    __quex_assert_no_passage();
_7:
    /* (547 from 544)  */
    ++(me->buffer._read_p);

    input = *(me->buffer._read_p);


    __quex_debug_state(547);
goto _44;


    __quex_assert_no_passage();
_8:
    /* (548 from 565) (548 from 580) (548 from 562) (548 from 553) (548 from 544) (548 from 548) (548 from 577) (548 from 549) (548 from 578) (548 from 564) (548 from 579) (548 from 561)  */

    ++(me->buffer._read_p);

_156:
    input = *(me->buffer._read_p);


    __quex_debug_state(548);
if( input < 0x207F ) {
if( input < 0x2E0 ) {
switch( input ) {
case 0x0: goto _73;
case 0x1: case 0x2: case 0x3: case 0x4: case 0x5: case 0x6: case 0x7: 
case 0x8: case 0x9: case 0xA: case 0xB: case 0xC: case 0xD: case 0xE: case 0xF: 
case 0x10: case 0x11: case 0x12: case 0x13: case 0x14: case 0x15: case 0x16: case 0x17: 
case 0x18: case 0x19: case 0x1A: case 0x1B: case 0x1C: case 0x1D: case 0x1E: case 0x1F: 
case 0x20: case 0x21: case 0x22: case 0x23: case 0x24: case 0x25: case 0x26: case 0x27: 
case 0x28: case 0x29: case 0x2A: case 0x2B: case 0x2C: case 0x2D: case 0x2E: case 0x2F: 
case 0x30: case 0x31: case 0x32: case 0x33: case 0x34: case 0x35: case 0x36: case 0x37: 
case 0x38: case 0x39: case 0x3A: case 0x3B: case 0x3C: case 0x3D: case 0x3E: case 0x3F: 
case 0x40: 
case 0x5B: case 0x5C: case 0x5D: case 0x5E: case 0x5F: case 0x60: 
case 0x7B: case 0x7C: case 0x7D: case 0x7E: case 0x7F: 
case 0x80: case 0x81: case 0x82: case 0x83: case 0x84: case 0x85: case 0x86: case 0x87: 
case 0x88: case 0x89: case 0x8A: case 0x8B: case 0x8C: case 0x8D: case 0x8E: case 0x8F: 
case 0x90: case 0x91: case 0x92: case 0x93: case 0x94: case 0x95: case 0x96: case 0x97: 
case 0x98: case 0x99: case 0x9A: case 0x9B: case 0x9C: case 0x9D: case 0x9E: case 0x9F: 
case 0xA0: case 0xA1: case 0xA2: case 0xA3: case 0xA4: case 0xA5: case 0xA6: case 0xA7: 
case 0xA8: case 0xA9: 
case 0xAB: case 0xAC: case 0xAD: case 0xAE: case 0xAF: 
case 0xB0: case 0xB1: case 0xB2: case 0xB3: case 0xB4: case 0xB5: case 0xB6: case 0xB7: 
case 0xB8: case 0xB9: 
case 0xBB: case 0xBC: case 0xBD: case 0xBE: case 0xBF: 
case 0xD7: 
case 0xF7: 
case 0x2B9: case 0x2BA: case 0x2BB: case 0x2BC: case 0x2BD: case 0x2BE: case 0x2BF: 
case 0x2C0: case 0x2C1: case 0x2C2: case 0x2C3: case 0x2C4: case 0x2C5: case 0x2C6: case 0x2C7: 
case 0x2C8: case 0x2C9: case 0x2CA: case 0x2CB: case 0x2CC: case 0x2CD: case 0x2CE: case 0x2CF: 
case 0x2D0: case 0x2D1: case 0x2D2: case 0x2D3: case 0x2D4: case 0x2D5: case 0x2D6: case 0x2D7: 
case 0x2D8: case 0x2D9: case 0x2DA: case 0x2DB: case 0x2DC: case 0x2DD: case 0x2DE: case 0x2DF: goto _45;
default: goto _8;
}
} else {
if( input < 0x1D6B ) {
switch( input ) {
case 0x2E0: case 0x2E1: case 0x2E2: case 0x2E3: case 0x2E4: 
case 0x1D00: case 0x1D01: case 0x1D02: case 0x1D03: case 0x1D04: case 0x1D05: case 0x1D06: case 0x1D07: 
case 0x1D08: case 0x1D09: case 0x1D0A: case 0x1D0B: case 0x1D0C: case 0x1D0D: case 0x1D0E: case 0x1D0F: 
case 0x1D10: case 0x1D11: case 0x1D12: case 0x1D13: case 0x1D14: case 0x1D15: case 0x1D16: case 0x1D17: 
case 0x1D18: case 0x1D19: case 0x1D1A: case 0x1D1B: case 0x1D1C: case 0x1D1D: case 0x1D1E: case 0x1D1F: 
case 0x1D20: case 0x1D21: case 0x1D22: case 0x1D23: case 0x1D24: case 0x1D25: 
case 0x1D2C: case 0x1D2D: case 0x1D2E: case 0x1D2F: 
case 0x1D30: case 0x1D31: case 0x1D32: case 0x1D33: case 0x1D34: case 0x1D35: case 0x1D36: case 0x1D37: 
case 0x1D38: case 0x1D39: case 0x1D3A: case 0x1D3B: case 0x1D3C: case 0x1D3D: case 0x1D3E: case 0x1D3F: 
case 0x1D40: case 0x1D41: case 0x1D42: case 0x1D43: case 0x1D44: case 0x1D45: case 0x1D46: case 0x1D47: 
case 0x1D48: case 0x1D49: case 0x1D4A: case 0x1D4B: case 0x1D4C: case 0x1D4D: case 0x1D4E: case 0x1D4F: 
case 0x1D50: case 0x1D51: case 0x1D52: case 0x1D53: case 0x1D54: case 0x1D55: case 0x1D56: case 0x1D57: 
case 0x1D58: case 0x1D59: case 0x1D5A: case 0x1D5B: case 0x1D5C: 
case 0x1D62: case 0x1D63: case 0x1D64: case 0x1D65: goto _8;
default: goto _45;
}
} else {
if( input < 0x1E00 ) {
if     ( input < 0x1D78 )   goto _8;
else if( input == 0x1D78 )  goto _45;
else if( input < 0x1DBF )   goto _8;
else                        goto _45;
} else {
if     ( input < 0x1F00 )   goto _8;
else if( input < 0x2071 )   goto _45;
else if( input == 0x2071 )  goto _8;
else                        goto _45;
}
}
}
} else {
if( input < 0xA78B ) {
switch( input ) {
case 0x207F: 
case 0x2090: case 0x2091: case 0x2092: case 0x2093: case 0x2094: case 0x2095: case 0x2096: case 0x2097: 
case 0x2098: case 0x2099: case 0x209A: case 0x209B: case 0x209C: 
case 0x212A: case 0x212B: 
case 0x2132: 
case 0x214E: 
case 0x2160: case 0x2161: case 0x2162: case 0x2163: case 0x2164: case 0x2165: case 0x2166: case 0x2167: 
case 0x2168: case 0x2169: case 0x216A: case 0x216B: case 0x216C: case 0x216D: case 0x216E: case 0x216F: 
case 0x2170: case 0x2171: case 0x2172: case 0x2173: case 0x2174: case 0x2175: case 0x2176: case 0x2177: 
case 0x2178: case 0x2179: case 0x217A: case 0x217B: case 0x217C: case 0x217D: case 0x217E: case 0x217F: 
case 0x2180: case 0x2181: case 0x2182: case 0x2183: case 0x2184: case 0x2185: case 0x2186: case 0x2187: 
case 0x2188: 
case 0x2C60: case 0x2C61: case 0x2C62: case 0x2C63: case 0x2C64: case 0x2C65: case 0x2C66: case 0x2C67: 
case 0x2C68: case 0x2C69: case 0x2C6A: case 0x2C6B: case 0x2C6C: case 0x2C6D: case 0x2C6E: case 0x2C6F: 
case 0x2C70: case 0x2C71: case 0x2C72: case 0x2C73: case 0x2C74: case 0x2C75: case 0x2C76: case 0x2C77: 
case 0x2C78: case 0x2C79: case 0x2C7A: case 0x2C7B: case 0x2C7C: case 0x2C7D: case 0x2C7E: case 0x2C7F: 
case 0xA722: case 0xA723: case 0xA724: case 0xA725: case 0xA726: case 0xA727: 
case 0xA728: case 0xA729: case 0xA72A: case 0xA72B: case 0xA72C: case 0xA72D: case 0xA72E: case 0xA72F: 
case 0xA730: case 0xA731: case 0xA732: case 0xA733: case 0xA734: case 0xA735: case 0xA736: case 0xA737: 
case 0xA738: case 0xA739: case 0xA73A: case 0xA73B: case 0xA73C: case 0xA73D: case 0xA73E: case 0xA73F: 
case 0xA740: case 0xA741: case 0xA742: case 0xA743: case 0xA744: case 0xA745: case 0xA746: case 0xA747: 
case 0xA748: case 0xA749: case 0xA74A: case 0xA74B: case 0xA74C: case 0xA74D: case 0xA74E: case 0xA74F: 
case 0xA750: case 0xA751: case 0xA752: case 0xA753: case 0xA754: case 0xA755: case 0xA756: case 0xA757: 
case 0xA758: case 0xA759: case 0xA75A: case 0xA75B: case 0xA75C: case 0xA75D: case 0xA75E: case 0xA75F: 
case 0xA760: case 0xA761: case 0xA762: case 0xA763: case 0xA764: case 0xA765: case 0xA766: case 0xA767: 
case 0xA768: case 0xA769: case 0xA76A: case 0xA76B: case 0xA76C: case 0xA76D: case 0xA76E: case 0xA76F: 
case 0xA770: case 0xA771: case 0xA772: case 0xA773: case 0xA774: case 0xA775: case 0xA776: case 0xA777: 
case 0xA778: case 0xA779: case 0xA77A: case 0xA77B: case 0xA77C: case 0xA77D: case 0xA77E: case 0xA77F: 
case 0xA780: case 0xA781: case 0xA782: case 0xA783: case 0xA784: case 0xA785: case 0xA786: case 0xA787: goto _8;
default: goto _45;
}
} else {
switch( input ) {
case 0xA78B: case 0xA78C: case 0xA78D: case 0xA78E: case 0xA78F: 
case 0xA790: case 0xA791: case 0xA792: case 0xA793: case 0xA794: case 0xA795: case 0xA796: case 0xA797: 
case 0xA798: case 0xA799: case 0xA79A: case 0xA79B: case 0xA79C: case 0xA79D: case 0xA79E: case 0xA79F: 
case 0xA7A0: case 0xA7A1: case 0xA7A2: case 0xA7A3: case 0xA7A4: case 0xA7A5: case 0xA7A6: case 0xA7A7: 
case 0xA7A8: case 0xA7A9: case 0xA7AA: case 0xA7AB: case 0xA7AC: case 0xA7AD: 
case 0xA7B0: case 0xA7B1: case 0xA7B2: case 0xA7B3: case 0xA7B4: case 0xA7B5: case 0xA7B6: case 0xA7B7: 
case 0xA7F7: 
case 0xA7F8: case 0xA7F9: case 0xA7FA: case 0xA7FB: case 0xA7FC: case 0xA7FD: case 0xA7FE: case 0xA7FF: 
case 0xAB30: case 0xAB31: case 0xAB32: case 0xAB33: case 0xAB34: case 0xAB35: case 0xAB36: case 0xAB37: 
case 0xAB38: case 0xAB39: case 0xAB3A: case 0xAB3B: case 0xAB3C: case 0xAB3D: case 0xAB3E: case 0xAB3F: 
case 0xAB40: case 0xAB41: case 0xAB42: case 0xAB43: case 0xAB44: case 0xAB45: case 0xAB46: case 0xAB47: 
case 0xAB48: case 0xAB49: case 0xAB4A: case 0xAB4B: case 0xAB4C: case 0xAB4D: case 0xAB4E: case 0xAB4F: 
case 0xAB50: case 0xAB51: case 0xAB52: case 0xAB53: case 0xAB54: case 0xAB55: case 0xAB56: case 0xAB57: 
case 0xAB58: case 0xAB59: case 0xAB5A: 
case 0xAB5C: case 0xAB5D: case 0xAB5E: case 0xAB5F: 
case 0xAB60: case 0xAB61: case 0xAB62: case 0xAB63: case 0xAB64: 
case 0xFB00: case 0xFB01: case 0xFB02: case 0xFB03: case 0xFB04: case 0xFB05: case 0xFB06: 
case 0xFF21: case 0xFF22: case 0xFF23: case 0xFF24: case 0xFF25: case 0xFF26: case 0xFF27: 
case 0xFF28: case 0xFF29: case 0xFF2A: case 0xFF2B: case 0xFF2C: case 0xFF2D: case 0xFF2E: case 0xFF2F: 
case 0xFF30: case 0xFF31: case 0xFF32: case 0xFF33: case 0xFF34: case 0xFF35: case 0xFF36: case 0xFF37: 
case 0xFF38: case 0xFF39: case 0xFF3A: 
case 0xFF41: case 0xFF42: case 0xFF43: case 0xFF44: case 0xFF45: case 0xFF46: case 0xFF47: 
case 0xFF48: case 0xFF49: case 0xFF4A: case 0xFF4B: case 0xFF4C: case 0xFF4D: case 0xFF4E: case 0xFF4F: 
case 0xFF50: case 0xFF51: case 0xFF52: case 0xFF53: case 0xFF54: case 0xFF55: case 0xFF56: case 0xFF57: 
case 0xFF58: case 0xFF59: case 0xFF5A: goto _8;
default: goto _45;
}
}
}


    __quex_assert_no_passage();
_72:
    /* (548 from RELOAD_FORWARD)  */
    goto _156;


    __quex_assert_no_passage();
_74:
    /* (549 from RELOAD_FORWARD)  */
_158:
    input = *(me->buffer._read_p);


    __quex_debug_state(549);
if( input < 0x2072 ) {
if( input < 0x2B9 ) {
switch( input ) {
case 0x0: goto _75;
case 0x1: case 0x2: case 0x3: case 0x4: case 0x5: case 0x6: case 0x7: 
case 0x8: case 0x9: case 0xA: case 0xB: case 0xC: case 0xD: case 0xE: case 0xF: 
case 0x10: case 0x11: case 0x12: case 0x13: case 0x14: case 0x15: case 0x16: case 0x17: 
case 0x18: case 0x19: case 0x1A: case 0x1B: case 0x1C: case 0x1D: case 0x1E: case 0x1F: 
case 0x20: case 0x21: case 0x22: case 0x23: case 0x24: case 0x25: case 0x26: case 0x27: 
case 0x28: case 0x29: case 0x2A: case 0x2B: case 0x2C: case 0x2D: case 0x2E: case 0x2F: 
case 0x30: case 0x31: case 0x32: case 0x33: case 0x34: case 0x35: case 0x36: case 0x37: 
case 0x38: case 0x39: case 0x3A: case 0x3B: case 0x3C: case 0x3D: case 0x3E: case 0x3F: 
case 0x40: 
case 0x5B: case 0x5C: case 0x5D: case 0x5E: case 0x5F: case 0x60: goto _45;
case 0x61: goto _39;
case 0x7B: case 0x7C: case 0x7D: case 0x7E: case 0x7F: 
case 0x80: case 0x81: case 0x82: case 0x83: case 0x84: case 0x85: case 0x86: case 0x87: 
case 0x88: case 0x89: case 0x8A: case 0x8B: case 0x8C: case 0x8D: case 0x8E: case 0x8F: 
case 0x90: case 0x91: case 0x92: case 0x93: case 0x94: case 0x95: case 0x96: case 0x97: 
case 0x98: case 0x99: case 0x9A: case 0x9B: case 0x9C: case 0x9D: case 0x9E: case 0x9F: 
case 0xA0: case 0xA1: case 0xA2: case 0xA3: case 0xA4: case 0xA5: case 0xA6: case 0xA7: 
case 0xA8: case 0xA9: 
case 0xAB: case 0xAC: case 0xAD: case 0xAE: case 0xAF: 
case 0xB0: case 0xB1: case 0xB2: case 0xB3: case 0xB4: case 0xB5: case 0xB6: case 0xB7: 
case 0xB8: case 0xB9: 
case 0xBB: case 0xBC: case 0xBD: case 0xBE: case 0xBF: 
case 0xD7: 
case 0xF7: goto _45;
default: goto _8;
}
} else {
if( input < 0x1D66 ) {
switch( input ) {
case 0x2E0: case 0x2E1: case 0x2E2: case 0x2E3: case 0x2E4: 
case 0x1D00: case 0x1D01: case 0x1D02: case 0x1D03: case 0x1D04: case 0x1D05: case 0x1D06: case 0x1D07: 
case 0x1D08: case 0x1D09: case 0x1D0A: case 0x1D0B: case 0x1D0C: case 0x1D0D: case 0x1D0E: case 0x1D0F: 
case 0x1D10: case 0x1D11: case 0x1D12: case 0x1D13: case 0x1D14: case 0x1D15: case 0x1D16: case 0x1D17: 
case 0x1D18: case 0x1D19: case 0x1D1A: case 0x1D1B: case 0x1D1C: case 0x1D1D: case 0x1D1E: case 0x1D1F: 
case 0x1D20: case 0x1D21: case 0x1D22: case 0x1D23: case 0x1D24: case 0x1D25: 
case 0x1D2C: case 0x1D2D: case 0x1D2E: case 0x1D2F: 
case 0x1D30: case 0x1D31: case 0x1D32: case 0x1D33: case 0x1D34: case 0x1D35: case 0x1D36: case 0x1D37: 
case 0x1D38: case 0x1D39: case 0x1D3A: case 0x1D3B: case 0x1D3C: case 0x1D3D: case 0x1D3E: case 0x1D3F: 
case 0x1D40: case 0x1D41: case 0x1D42: case 0x1D43: case 0x1D44: case 0x1D45: case 0x1D46: case 0x1D47: 
case 0x1D48: case 0x1D49: case 0x1D4A: case 0x1D4B: case 0x1D4C: case 0x1D4D: case 0x1D4E: case 0x1D4F: 
case 0x1D50: case 0x1D51: case 0x1D52: case 0x1D53: case 0x1D54: case 0x1D55: case 0x1D56: case 0x1D57: 
case 0x1D58: case 0x1D59: case 0x1D5A: case 0x1D5B: case 0x1D5C: 
case 0x1D62: case 0x1D63: case 0x1D64: case 0x1D65: goto _8;
default: goto _45;
}
} else {
if( input < 0x1DBF ) {
if     ( input < 0x1D6B )   goto _45;
else if( input < 0x1D78 )   goto _8;
else if( input == 0x1D78 )  goto _45;
else                        goto _8;
} else {
if     ( input < 0x1E00 )  goto _45;
else if( input < 0x1F00 )  goto _8;
else if( input < 0x2071 )  goto _45;
else                       goto _8;
}
}
}
} else {
if( input < 0xA788 ) {
switch( input ) {
case 0x207F: 
case 0x2090: case 0x2091: case 0x2092: case 0x2093: case 0x2094: case 0x2095: case 0x2096: case 0x2097: 
case 0x2098: case 0x2099: case 0x209A: case 0x209B: case 0x209C: 
case 0x212A: case 0x212B: 
case 0x2132: 
case 0x214E: 
case 0x2160: case 0x2161: case 0x2162: case 0x2163: case 0x2164: case 0x2165: case 0x2166: case 0x2167: 
case 0x2168: case 0x2169: case 0x216A: case 0x216B: case 0x216C: case 0x216D: case 0x216E: case 0x216F: 
case 0x2170: case 0x2171: case 0x2172: case 0x2173: case 0x2174: case 0x2175: case 0x2176: case 0x2177: 
case 0x2178: case 0x2179: case 0x217A: case 0x217B: case 0x217C: case 0x217D: case 0x217E: case 0x217F: 
case 0x2180: case 0x2181: case 0x2182: case 0x2183: case 0x2184: case 0x2185: case 0x2186: case 0x2187: 
case 0x2188: 
case 0x2C60: case 0x2C61: case 0x2C62: case 0x2C63: case 0x2C64: case 0x2C65: case 0x2C66: case 0x2C67: 
case 0x2C68: case 0x2C69: case 0x2C6A: case 0x2C6B: case 0x2C6C: case 0x2C6D: case 0x2C6E: case 0x2C6F: 
case 0x2C70: case 0x2C71: case 0x2C72: case 0x2C73: case 0x2C74: case 0x2C75: case 0x2C76: case 0x2C77: 
case 0x2C78: case 0x2C79: case 0x2C7A: case 0x2C7B: case 0x2C7C: case 0x2C7D: case 0x2C7E: case 0x2C7F: 
case 0xA722: case 0xA723: case 0xA724: case 0xA725: case 0xA726: case 0xA727: 
case 0xA728: case 0xA729: case 0xA72A: case 0xA72B: case 0xA72C: case 0xA72D: case 0xA72E: case 0xA72F: 
case 0xA730: case 0xA731: case 0xA732: case 0xA733: case 0xA734: case 0xA735: case 0xA736: case 0xA737: 
case 0xA738: case 0xA739: case 0xA73A: case 0xA73B: case 0xA73C: case 0xA73D: case 0xA73E: case 0xA73F: 
case 0xA740: case 0xA741: case 0xA742: case 0xA743: case 0xA744: case 0xA745: case 0xA746: case 0xA747: 
case 0xA748: case 0xA749: case 0xA74A: case 0xA74B: case 0xA74C: case 0xA74D: case 0xA74E: case 0xA74F: 
case 0xA750: case 0xA751: case 0xA752: case 0xA753: case 0xA754: case 0xA755: case 0xA756: case 0xA757: 
case 0xA758: case 0xA759: case 0xA75A: case 0xA75B: case 0xA75C: case 0xA75D: case 0xA75E: case 0xA75F: 
case 0xA760: case 0xA761: case 0xA762: case 0xA763: case 0xA764: case 0xA765: case 0xA766: case 0xA767: 
case 0xA768: case 0xA769: case 0xA76A: case 0xA76B: case 0xA76C: case 0xA76D: case 0xA76E: case 0xA76F: 
case 0xA770: case 0xA771: case 0xA772: case 0xA773: case 0xA774: case 0xA775: case 0xA776: case 0xA777: 
case 0xA778: case 0xA779: case 0xA77A: case 0xA77B: case 0xA77C: case 0xA77D: case 0xA77E: case 0xA77F: 
case 0xA780: case 0xA781: case 0xA782: case 0xA783: case 0xA784: case 0xA785: case 0xA786: case 0xA787: goto _8;
default: goto _45;
}
} else {
switch( input ) {
case 0xA78B: case 0xA78C: case 0xA78D: case 0xA78E: case 0xA78F: 
case 0xA790: case 0xA791: case 0xA792: case 0xA793: case 0xA794: case 0xA795: case 0xA796: case 0xA797: 
case 0xA798: case 0xA799: case 0xA79A: case 0xA79B: case 0xA79C: case 0xA79D: case 0xA79E: case 0xA79F: 
case 0xA7A0: case 0xA7A1: case 0xA7A2: case 0xA7A3: case 0xA7A4: case 0xA7A5: case 0xA7A6: case 0xA7A7: 
case 0xA7A8: case 0xA7A9: case 0xA7AA: case 0xA7AB: case 0xA7AC: case 0xA7AD: 
case 0xA7B0: case 0xA7B1: case 0xA7B2: case 0xA7B3: case 0xA7B4: case 0xA7B5: case 0xA7B6: case 0xA7B7: 
case 0xA7F7: 
case 0xA7F8: case 0xA7F9: case 0xA7FA: case 0xA7FB: case 0xA7FC: case 0xA7FD: case 0xA7FE: case 0xA7FF: 
case 0xAB30: case 0xAB31: case 0xAB32: case 0xAB33: case 0xAB34: case 0xAB35: case 0xAB36: case 0xAB37: 
case 0xAB38: case 0xAB39: case 0xAB3A: case 0xAB3B: case 0xAB3C: case 0xAB3D: case 0xAB3E: case 0xAB3F: 
case 0xAB40: case 0xAB41: case 0xAB42: case 0xAB43: case 0xAB44: case 0xAB45: case 0xAB46: case 0xAB47: 
case 0xAB48: case 0xAB49: case 0xAB4A: case 0xAB4B: case 0xAB4C: case 0xAB4D: case 0xAB4E: case 0xAB4F: 
case 0xAB50: case 0xAB51: case 0xAB52: case 0xAB53: case 0xAB54: case 0xAB55: case 0xAB56: case 0xAB57: 
case 0xAB58: case 0xAB59: case 0xAB5A: 
case 0xAB5C: case 0xAB5D: case 0xAB5E: case 0xAB5F: 
case 0xAB60: case 0xAB61: case 0xAB62: case 0xAB63: case 0xAB64: 
case 0xFB00: case 0xFB01: case 0xFB02: case 0xFB03: case 0xFB04: case 0xFB05: case 0xFB06: 
case 0xFF21: case 0xFF22: case 0xFF23: case 0xFF24: case 0xFF25: case 0xFF26: case 0xFF27: 
case 0xFF28: case 0xFF29: case 0xFF2A: case 0xFF2B: case 0xFF2C: case 0xFF2D: case 0xFF2E: case 0xFF2F: 
case 0xFF30: case 0xFF31: case 0xFF32: case 0xFF33: case 0xFF34: case 0xFF35: case 0xFF36: case 0xFF37: 
case 0xFF38: case 0xFF39: case 0xFF3A: 
case 0xFF41: case 0xFF42: case 0xFF43: case 0xFF44: case 0xFF45: case 0xFF46: case 0xFF47: 
case 0xFF48: case 0xFF49: case 0xFF4A: case 0xFF4B: case 0xFF4C: case 0xFF4D: case 0xFF4E: case 0xFF4F: 
case 0xFF50: case 0xFF51: case 0xFF52: case 0xFF53: case 0xFF54: case 0xFF55: case 0xFF56: case 0xFF57: 
case 0xFF58: case 0xFF59: case 0xFF5A: goto _8;
default: goto _45;
}
}
}


    __quex_assert_no_passage();
_9:
    /* (549 from 544)  */
    ++(me->buffer._read_p);

    goto _158;


    __quex_assert_no_passage();
_10:
    /* (550 from 544)  */
    ++(me->buffer._read_p);

    input = *(me->buffer._read_p);


    __quex_debug_state(550);
goto _46;


    __quex_assert_no_passage();
_11:
    /* (551 from 551) (551 from 557) (551 from 544)  */

    ++(me->buffer._read_p);

_162:
    input = *(me->buffer._read_p);


    __quex_debug_state(551);
if( input < 0x1F46 ) {
switch( input ) {
case 0x0: goto _77;
case 0x370: case 0x371: case 0x372: case 0x373: 
case 0x376: case 0x377: 
case 0x37A: case 0x37B: case 0x37C: case 0x37D: 
case 0x37F: 
case 0x386: 
case 0x388: case 0x389: case 0x38A: 
case 0x38C: 
case 0x38E: case 0x38F: 
case 0x390: case 0x391: case 0x392: case 0x393: case 0x394: case 0x395: case 0x396: case 0x397: 
case 0x398: case 0x399: case 0x39A: case 0x39B: case 0x39C: case 0x39D: case 0x39E: case 0x39F: 
case 0x3A0: case 0x3A1: 
case 0x3A3: case 0x3A4: case 0x3A5: case 0x3A6: case 0x3A7: 
case 0x3A8: case 0x3A9: case 0x3AA: case 0x3AB: case 0x3AC: case 0x3AD: case 0x3AE: case 0x3AF: 
case 0x3B0: case 0x3B1: case 0x3B2: case 0x3B3: case 0x3B4: case 0x3B5: case 0x3B6: case 0x3B7: 
case 0x3B8: case 0x3B9: case 0x3BA: case 0x3BB: case 0x3BC: case 0x3BD: case 0x3BE: case 0x3BF: 
case 0x3C0: case 0x3C1: case 0x3C2: case 0x3C3: case 0x3C4: case 0x3C5: case 0x3C6: case 0x3C7: 
case 0x3C8: case 0x3C9: case 0x3CA: case 0x3CB: case 0x3CC: case 0x3CD: case 0x3CE: case 0x3CF: 
case 0x3D0: case 0x3D1: case 0x3D2: case 0x3D3: case 0x3D4: case 0x3D5: case 0x3D6: case 0x3D7: 
case 0x3D8: case 0x3D9: case 0x3DA: case 0x3DB: case 0x3DC: case 0x3DD: case 0x3DE: case 0x3DF: 
case 0x3E0: case 0x3E1: 
case 0x3F0: case 0x3F1: case 0x3F2: case 0x3F3: case 0x3F4: case 0x3F5: 
case 0x3F7: 
case 0x3F8: case 0x3F9: case 0x3FA: case 0x3FB: case 0x3FC: case 0x3FD: case 0x3FE: case 0x3FF: 
case 0x1D26: case 0x1D27: case 0x1D28: case 0x1D29: case 0x1D2A: 
case 0x1D5D: case 0x1D5E: case 0x1D5F: case 0x1D60: case 0x1D61: 
case 0x1D66: case 0x1D67: case 0x1D68: case 0x1D69: case 0x1D6A: 
case 0x1DBF: 
case 0x1F00: case 0x1F01: case 0x1F02: case 0x1F03: case 0x1F04: case 0x1F05: case 0x1F06: case 0x1F07: 
case 0x1F08: case 0x1F09: case 0x1F0A: case 0x1F0B: case 0x1F0C: case 0x1F0D: case 0x1F0E: case 0x1F0F: 
case 0x1F10: case 0x1F11: case 0x1F12: case 0x1F13: case 0x1F14: case 0x1F15: 
case 0x1F18: case 0x1F19: case 0x1F1A: case 0x1F1B: case 0x1F1C: case 0x1F1D: 
case 0x1F20: case 0x1F21: case 0x1F22: case 0x1F23: case 0x1F24: case 0x1F25: case 0x1F26: case 0x1F27: 
case 0x1F28: case 0x1F29: case 0x1F2A: case 0x1F2B: case 0x1F2C: case 0x1F2D: case 0x1F2E: case 0x1F2F: 
case 0x1F30: case 0x1F31: case 0x1F32: case 0x1F33: case 0x1F34: case 0x1F35: case 0x1F36: case 0x1F37: 
case 0x1F38: case 0x1F39: case 0x1F3A: case 0x1F3B: case 0x1F3C: case 0x1F3D: case 0x1F3E: case 0x1F3F: 
case 0x1F40: case 0x1F41: case 0x1F42: case 0x1F43: case 0x1F44: case 0x1F45: goto _11;
default: goto _47;
}
} else {
switch( input ) {
case 0x1F48: case 0x1F49: case 0x1F4A: case 0x1F4B: case 0x1F4C: case 0x1F4D: 
case 0x1F50: case 0x1F51: case 0x1F52: case 0x1F53: case 0x1F54: case 0x1F55: case 0x1F56: case 0x1F57: 
case 0x1F59: 
case 0x1F5B: 
case 0x1F5D: 
case 0x1F5F: 
case 0x1F60: case 0x1F61: case 0x1F62: case 0x1F63: case 0x1F64: case 0x1F65: case 0x1F66: case 0x1F67: 
case 0x1F68: case 0x1F69: case 0x1F6A: case 0x1F6B: case 0x1F6C: case 0x1F6D: case 0x1F6E: case 0x1F6F: 
case 0x1F70: case 0x1F71: case 0x1F72: case 0x1F73: case 0x1F74: case 0x1F75: case 0x1F76: case 0x1F77: 
case 0x1F78: case 0x1F79: case 0x1F7A: case 0x1F7B: case 0x1F7C: case 0x1F7D: 
case 0x1F80: case 0x1F81: case 0x1F82: case 0x1F83: case 0x1F84: case 0x1F85: case 0x1F86: case 0x1F87: 
case 0x1F88: case 0x1F89: case 0x1F8A: case 0x1F8B: case 0x1F8C: case 0x1F8D: case 0x1F8E: case 0x1F8F: 
case 0x1F90: case 0x1F91: case 0x1F92: case 0x1F93: case 0x1F94: case 0x1F95: case 0x1F96: case 0x1F97: 
case 0x1F98: case 0x1F99: case 0x1F9A: case 0x1F9B: case 0x1F9C: case 0x1F9D: case 0x1F9E: case 0x1F9F: 
case 0x1FA0: case 0x1FA1: case 0x1FA2: case 0x1FA3: case 0x1FA4: case 0x1FA5: case 0x1FA6: case 0x1FA7: 
case 0x1FA8: case 0x1FA9: case 0x1FAA: case 0x1FAB: case 0x1FAC: case 0x1FAD: case 0x1FAE: case 0x1FAF: 
case 0x1FB0: case 0x1FB1: case 0x1FB2: case 0x1FB3: case 0x1FB4: 
case 0x1FB6: case 0x1FB7: case 0x1FB8: case 0x1FB9: case 0x1FBA: case 0x1FBB: case 0x1FBC: 
case 0x1FBE: 
case 0x1FC2: case 0x1FC3: case 0x1FC4: 
case 0x1FC6: case 0x1FC7: case 0x1FC8: case 0x1FC9: case 0x1FCA: case 0x1FCB: case 0x1FCC: 
case 0x1FD0: case 0x1FD1: case 0x1FD2: case 0x1FD3: 
case 0x1FD6: case 0x1FD7: case 0x1FD8: case 0x1FD9: case 0x1FDA: case 0x1FDB: 
case 0x1FE0: case 0x1FE1: case 0x1FE2: case 0x1FE3: case 0x1FE4: case 0x1FE5: case 0x1FE6: case 0x1FE7: 
case 0x1FE8: case 0x1FE9: case 0x1FEA: case 0x1FEB: case 0x1FEC: 
case 0x1FF2: case 0x1FF3: case 0x1FF4: 
case 0x1FF6: case 0x1FF7: case 0x1FF8: case 0x1FF9: case 0x1FFA: case 0x1FFB: case 0x1FFC: 
case 0x2126: 
case 0xAB65: goto _11;
default: goto _47;
}
}


    __quex_assert_no_passage();
_76:
    /* (551 from RELOAD_FORWARD)  */
    goto _162;


    __quex_assert_no_passage();
_12:
    /* (552 from 544)  */
    ++(me->buffer._read_p);

    input = *(me->buffer._read_p);


    __quex_debug_state(552);
goto _48;


    __quex_assert_no_passage();
_13:
    /* (553 from 544)  */
    ++(me->buffer._read_p);

_165:
    input = *(me->buffer._read_p);


    __quex_debug_state(553);
if( input < 0x2072 ) {
if( input < 0xF8 ) {
switch( input ) {
case 0x0: goto _79;
case 0x41: case 0x42: case 0x43: case 0x44: case 0x45: case 0x46: case 0x47: 
case 0x48: case 0x49: case 0x4A: case 0x4B: case 0x4C: case 0x4D: case 0x4E: case 0x4F: 
case 0x50: case 0x51: case 0x52: case 0x53: case 0x54: case 0x55: case 0x56: case 0x57: 
case 0x58: case 0x59: case 0x5A: 
case 0x61: case 0x62: case 0x63: case 0x64: case 0x65: case 0x66: case 0x67: 
case 0x68: case 0x69: case 0x6A: case 0x6B: case 0x6C: case 0x6D: case 0x6E: goto _8;
case 0x6F: goto _37;
case 0x70: case 0x71: case 0x72: case 0x73: case 0x74: case 0x75: case 0x76: case 0x77: 
case 0x78: case 0x79: case 0x7A: 
case 0xAA: 
case 0xBA: 
case 0xC0: case 0xC1: case 0xC2: case 0xC3: case 0xC4: case 0xC5: case 0xC6: case 0xC7: 
case 0xC8: case 0xC9: case 0xCA: case 0xCB: case 0xCC: case 0xCD: case 0xCE: case 0xCF: 
case 0xD0: case 0xD1: case 0xD2: case 0xD3: case 0xD4: case 0xD5: case 0xD6: 
case 0xD8: case 0xD9: case 0xDA: case 0xDB: case 0xDC: case 0xDD: case 0xDE: case 0xDF: 
case 0xE0: case 0xE1: case 0xE2: case 0xE3: case 0xE4: case 0xE5: case 0xE6: case 0xE7: 
case 0xE8: case 0xE9: case 0xEA: case 0xEB: case 0xEC: case 0xED: case 0xEE: case 0xEF: 
case 0xF0: case 0xF1: case 0xF2: case 0xF3: case 0xF4: case 0xF5: case 0xF6: goto _8;
default: goto _45;
}
} else {
if( input < 0x1D62 ) {
if( input < 0x1D00 ) {
if     ( input < 0x2B9 )  goto _8;
else if( input < 0x2E0 )  goto _45;
else if( input < 0x2E5 )  goto _8;
else                      goto _45;
} else {
if     ( input < 0x1D26 )  goto _8;
else if( input < 0x1D2C )  goto _45;
else if( input < 0x1D5D )  goto _8;
else                       goto _45;
}
} else {
if( input < 0x1D79 ) {
if     ( input < 0x1D66 )  goto _8;
else if( input < 0x1D6B )  goto _45;
else if( input < 0x1D78 )  goto _8;
else                       goto _45;
} else {
if     ( input < 0x1DBF )  goto _8;
else if( input < 0x1E00 )  goto _45;
else if( input < 0x1F00 )  goto _8;
else if( input < 0x2071 )  goto _45;
else                       goto _8;
}
}
}
} else {
if( input < 0xA788 ) {
switch( input ) {
case 0x207F: 
case 0x2090: case 0x2091: case 0x2092: case 0x2093: case 0x2094: case 0x2095: case 0x2096: case 0x2097: 
case 0x2098: case 0x2099: case 0x209A: case 0x209B: case 0x209C: 
case 0x212A: case 0x212B: 
case 0x2132: 
case 0x214E: 
case 0x2160: case 0x2161: case 0x2162: case 0x2163: case 0x2164: case 0x2165: case 0x2166: case 0x2167: 
case 0x2168: case 0x2169: case 0x216A: case 0x216B: case 0x216C: case 0x216D: case 0x216E: case 0x216F: 
case 0x2170: case 0x2171: case 0x2172: case 0x2173: case 0x2174: case 0x2175: case 0x2176: case 0x2177: 
case 0x2178: case 0x2179: case 0x217A: case 0x217B: case 0x217C: case 0x217D: case 0x217E: case 0x217F: 
case 0x2180: case 0x2181: case 0x2182: case 0x2183: case 0x2184: case 0x2185: case 0x2186: case 0x2187: 
case 0x2188: 
case 0x2C60: case 0x2C61: case 0x2C62: case 0x2C63: case 0x2C64: case 0x2C65: case 0x2C66: case 0x2C67: 
case 0x2C68: case 0x2C69: case 0x2C6A: case 0x2C6B: case 0x2C6C: case 0x2C6D: case 0x2C6E: case 0x2C6F: 
case 0x2C70: case 0x2C71: case 0x2C72: case 0x2C73: case 0x2C74: case 0x2C75: case 0x2C76: case 0x2C77: 
case 0x2C78: case 0x2C79: case 0x2C7A: case 0x2C7B: case 0x2C7C: case 0x2C7D: case 0x2C7E: case 0x2C7F: 
case 0xA722: case 0xA723: case 0xA724: case 0xA725: case 0xA726: case 0xA727: 
case 0xA728: case 0xA729: case 0xA72A: case 0xA72B: case 0xA72C: case 0xA72D: case 0xA72E: case 0xA72F: 
case 0xA730: case 0xA731: case 0xA732: case 0xA733: case 0xA734: case 0xA735: case 0xA736: case 0xA737: 
case 0xA738: case 0xA739: case 0xA73A: case 0xA73B: case 0xA73C: case 0xA73D: case 0xA73E: case 0xA73F: 
case 0xA740: case 0xA741: case 0xA742: case 0xA743: case 0xA744: case 0xA745: case 0xA746: case 0xA747: 
case 0xA748: case 0xA749: case 0xA74A: case 0xA74B: case 0xA74C: case 0xA74D: case 0xA74E: case 0xA74F: 
case 0xA750: case 0xA751: case 0xA752: case 0xA753: case 0xA754: case 0xA755: case 0xA756: case 0xA757: 
case 0xA758: case 0xA759: case 0xA75A: case 0xA75B: case 0xA75C: case 0xA75D: case 0xA75E: case 0xA75F: 
case 0xA760: case 0xA761: case 0xA762: case 0xA763: case 0xA764: case 0xA765: case 0xA766: case 0xA767: 
case 0xA768: case 0xA769: case 0xA76A: case 0xA76B: case 0xA76C: case 0xA76D: case 0xA76E: case 0xA76F: 
case 0xA770: case 0xA771: case 0xA772: case 0xA773: case 0xA774: case 0xA775: case 0xA776: case 0xA777: 
case 0xA778: case 0xA779: case 0xA77A: case 0xA77B: case 0xA77C: case 0xA77D: case 0xA77E: case 0xA77F: 
case 0xA780: case 0xA781: case 0xA782: case 0xA783: case 0xA784: case 0xA785: case 0xA786: case 0xA787: goto _8;
default: goto _45;
}
} else {
switch( input ) {
case 0xA78B: case 0xA78C: case 0xA78D: case 0xA78E: case 0xA78F: 
case 0xA790: case 0xA791: case 0xA792: case 0xA793: case 0xA794: case 0xA795: case 0xA796: case 0xA797: 
case 0xA798: case 0xA799: case 0xA79A: case 0xA79B: case 0xA79C: case 0xA79D: case 0xA79E: case 0xA79F: 
case 0xA7A0: case 0xA7A1: case 0xA7A2: case 0xA7A3: case 0xA7A4: case 0xA7A5: case 0xA7A6: case 0xA7A7: 
case 0xA7A8: case 0xA7A9: case 0xA7AA: case 0xA7AB: case 0xA7AC: case 0xA7AD: 
case 0xA7B0: case 0xA7B1: case 0xA7B2: case 0xA7B3: case 0xA7B4: case 0xA7B5: case 0xA7B6: case 0xA7B7: 
case 0xA7F7: 
case 0xA7F8: case 0xA7F9: case 0xA7FA: case 0xA7FB: case 0xA7FC: case 0xA7FD: case 0xA7FE: case 0xA7FF: 
case 0xAB30: case 0xAB31: case 0xAB32: case 0xAB33: case 0xAB34: case 0xAB35: case 0xAB36: case 0xAB37: 
case 0xAB38: case 0xAB39: case 0xAB3A: case 0xAB3B: case 0xAB3C: case 0xAB3D: case 0xAB3E: case 0xAB3F: 
case 0xAB40: case 0xAB41: case 0xAB42: case 0xAB43: case 0xAB44: case 0xAB45: case 0xAB46: case 0xAB47: 
case 0xAB48: case 0xAB49: case 0xAB4A: case 0xAB4B: case 0xAB4C: case 0xAB4D: case 0xAB4E: case 0xAB4F: 
case 0xAB50: case 0xAB51: case 0xAB52: case 0xAB53: case 0xAB54: case 0xAB55: case 0xAB56: case 0xAB57: 
case 0xAB58: case 0xAB59: case 0xAB5A: 
case 0xAB5C: case 0xAB5D: case 0xAB5E: case 0xAB5F: 
case 0xAB60: case 0xAB61: case 0xAB62: case 0xAB63: case 0xAB64: 
case 0xFB00: case 0xFB01: case 0xFB02: case 0xFB03: case 0xFB04: case 0xFB05: case 0xFB06: 
case 0xFF21: case 0xFF22: case 0xFF23: case 0xFF24: case 0xFF25: case 0xFF26: case 0xFF27: 
case 0xFF28: case 0xFF29: case 0xFF2A: case 0xFF2B: case 0xFF2C: case 0xFF2D: case 0xFF2E: case 0xFF2F: 
case 0xFF30: case 0xFF31: case 0xFF32: case 0xFF33: case 0xFF34: case 0xFF35: case 0xFF36: case 0xFF37: 
case 0xFF38: case 0xFF39: case 0xFF3A: 
case 0xFF41: case 0xFF42: case 0xFF43: case 0xFF44: case 0xFF45: case 0xFF46: case 0xFF47: 
case 0xFF48: case 0xFF49: case 0xFF4A: case 0xFF4B: case 0xFF4C: case 0xFF4D: case 0xFF4E: case 0xFF4F: 
case 0xFF50: case 0xFF51: case 0xFF52: case 0xFF53: case 0xFF54: case 0xFF55: case 0xFF56: case 0xFF57: 
case 0xFF58: case 0xFF59: case 0xFF5A: goto _8;
default: goto _45;
}
}
}


    __quex_assert_no_passage();
_78:
    /* (553 from RELOAD_FORWARD)  */
    goto _165;


    __quex_assert_no_passage();
_14:
    /* (554 from 544)  */
    ++(me->buffer._read_p);

    input = *(me->buffer._read_p);


    __quex_debug_state(554);
goto _49;


    __quex_assert_no_passage();
_15:
    /* (555 from 544)  */
    ++(me->buffer._read_p);

    input = *(me->buffer._read_p);


    __quex_debug_state(555);
goto _50;


    __quex_assert_no_passage();
_80:
    /* (556 from RELOAD_FORWARD)  */
_169:
    input = *(me->buffer._read_p);


    __quex_debug_state(556);
if     ( input >= 0x3A )  goto _51;
else if( input >= 0x30 )  goto _33;
else if( input >= 0x1 )   goto _51;
else                      goto _81;


    __quex_assert_no_passage();
_16:
    /* (556 from 544)  */
    ++(me->buffer._read_p);

    goto _169;


    __quex_assert_no_passage();
_82:
    /* (557 from RELOAD_FORWARD)  */
_171:
    input = *(me->buffer._read_p);


    __quex_debug_state(557);
if( input < 0x1F46 ) {
switch( input ) {
case 0x0: goto _83;
case 0x370: case 0x371: case 0x372: case 0x373: 
case 0x376: case 0x377: 
case 0x37A: case 0x37B: case 0x37C: case 0x37D: 
case 0x37F: 
case 0x386: 
case 0x388: case 0x389: case 0x38A: 
case 0x38C: 
case 0x38E: case 0x38F: 
case 0x390: case 0x391: case 0x392: case 0x393: case 0x394: case 0x395: case 0x396: case 0x397: 
case 0x398: case 0x399: case 0x39A: case 0x39B: case 0x39C: case 0x39D: case 0x39E: case 0x39F: 
case 0x3A0: case 0x3A1: 
case 0x3A3: case 0x3A4: case 0x3A5: case 0x3A6: case 0x3A7: 
case 0x3A8: case 0x3A9: case 0x3AA: case 0x3AB: case 0x3AC: case 0x3AD: case 0x3AE: case 0x3AF: 
case 0x3B0: case 0x3B1: case 0x3B2: case 0x3B3: case 0x3B4: case 0x3B5: case 0x3B6: case 0x3B7: 
case 0x3B8: case 0x3B9: case 0x3BA: case 0x3BB: case 0x3BC: case 0x3BD: case 0x3BE: case 0x3BF: 
case 0x3C0: case 0x3C1: case 0x3C2: case 0x3C3: case 0x3C4: case 0x3C5: case 0x3C6: case 0x3C7: 
case 0x3C8: case 0x3C9: case 0x3CA: case 0x3CB: case 0x3CC: case 0x3CD: case 0x3CE: case 0x3CF: 
case 0x3D0: case 0x3D1: case 0x3D2: case 0x3D3: case 0x3D4: case 0x3D5: case 0x3D6: case 0x3D7: 
case 0x3D8: case 0x3D9: case 0x3DA: case 0x3DB: case 0x3DC: case 0x3DD: case 0x3DE: case 0x3DF: 
case 0x3E0: case 0x3E1: 
case 0x3F0: case 0x3F1: case 0x3F2: case 0x3F3: case 0x3F4: case 0x3F5: 
case 0x3F7: 
case 0x3F8: case 0x3F9: case 0x3FA: case 0x3FB: case 0x3FC: case 0x3FD: case 0x3FE: case 0x3FF: 
case 0x1D26: case 0x1D27: case 0x1D28: case 0x1D29: case 0x1D2A: 
case 0x1D5D: case 0x1D5E: case 0x1D5F: case 0x1D60: case 0x1D61: 
case 0x1D66: case 0x1D67: case 0x1D68: case 0x1D69: case 0x1D6A: 
case 0x1DBF: 
case 0x1F00: case 0x1F01: case 0x1F02: case 0x1F03: case 0x1F04: case 0x1F05: case 0x1F06: case 0x1F07: 
case 0x1F08: case 0x1F09: case 0x1F0A: case 0x1F0B: case 0x1F0C: case 0x1F0D: case 0x1F0E: case 0x1F0F: 
case 0x1F10: case 0x1F11: case 0x1F12: case 0x1F13: case 0x1F14: case 0x1F15: 
case 0x1F18: case 0x1F19: case 0x1F1A: case 0x1F1B: case 0x1F1C: case 0x1F1D: 
case 0x1F20: case 0x1F21: case 0x1F22: case 0x1F23: case 0x1F24: case 0x1F25: case 0x1F26: case 0x1F27: 
case 0x1F28: case 0x1F29: case 0x1F2A: case 0x1F2B: case 0x1F2C: case 0x1F2D: case 0x1F2E: case 0x1F2F: 
case 0x1F30: case 0x1F31: case 0x1F32: case 0x1F33: case 0x1F34: case 0x1F35: case 0x1F36: case 0x1F37: 
case 0x1F38: case 0x1F39: case 0x1F3A: case 0x1F3B: case 0x1F3C: case 0x1F3D: case 0x1F3E: case 0x1F3F: 
case 0x1F40: case 0x1F41: case 0x1F42: case 0x1F43: case 0x1F44: case 0x1F45: goto _11;
default: goto _52;
}
} else {
switch( input ) {
case 0x1F48: case 0x1F49: case 0x1F4A: case 0x1F4B: case 0x1F4C: case 0x1F4D: 
case 0x1F50: case 0x1F51: case 0x1F52: case 0x1F53: case 0x1F54: case 0x1F55: case 0x1F56: case 0x1F57: 
case 0x1F59: 
case 0x1F5B: 
case 0x1F5D: 
case 0x1F5F: 
case 0x1F60: case 0x1F61: case 0x1F62: case 0x1F63: case 0x1F64: case 0x1F65: case 0x1F66: case 0x1F67: 
case 0x1F68: case 0x1F69: case 0x1F6A: case 0x1F6B: case 0x1F6C: case 0x1F6D: case 0x1F6E: case 0x1F6F: 
case 0x1F70: case 0x1F71: case 0x1F72: case 0x1F73: case 0x1F74: case 0x1F75: case 0x1F76: case 0x1F77: 
case 0x1F78: case 0x1F79: case 0x1F7A: case 0x1F7B: case 0x1F7C: case 0x1F7D: 
case 0x1F80: case 0x1F81: case 0x1F82: case 0x1F83: case 0x1F84: case 0x1F85: case 0x1F86: case 0x1F87: 
case 0x1F88: case 0x1F89: case 0x1F8A: case 0x1F8B: case 0x1F8C: case 0x1F8D: case 0x1F8E: case 0x1F8F: 
case 0x1F90: case 0x1F91: case 0x1F92: case 0x1F93: case 0x1F94: case 0x1F95: case 0x1F96: case 0x1F97: 
case 0x1F98: case 0x1F99: case 0x1F9A: case 0x1F9B: case 0x1F9C: case 0x1F9D: case 0x1F9E: case 0x1F9F: 
case 0x1FA0: case 0x1FA1: case 0x1FA2: case 0x1FA3: case 0x1FA4: case 0x1FA5: case 0x1FA6: case 0x1FA7: 
case 0x1FA8: case 0x1FA9: case 0x1FAA: case 0x1FAB: case 0x1FAC: case 0x1FAD: case 0x1FAE: case 0x1FAF: 
case 0x1FB0: case 0x1FB1: case 0x1FB2: case 0x1FB3: case 0x1FB4: 
case 0x1FB6: case 0x1FB7: case 0x1FB8: case 0x1FB9: case 0x1FBA: case 0x1FBB: case 0x1FBC: 
case 0x1FBE: 
case 0x1FC2: case 0x1FC3: case 0x1FC4: 
case 0x1FC6: case 0x1FC7: case 0x1FC8: case 0x1FC9: case 0x1FCA: case 0x1FCB: case 0x1FCC: 
case 0x1FD0: case 0x1FD1: case 0x1FD2: case 0x1FD3: 
case 0x1FD6: case 0x1FD7: case 0x1FD8: case 0x1FD9: case 0x1FDA: case 0x1FDB: 
case 0x1FE0: case 0x1FE1: case 0x1FE2: case 0x1FE3: case 0x1FE4: case 0x1FE5: case 0x1FE6: case 0x1FE7: 
case 0x1FE8: case 0x1FE9: case 0x1FEA: case 0x1FEB: case 0x1FEC: 
case 0x1FF2: case 0x1FF3: case 0x1FF4: 
case 0x1FF6: case 0x1FF7: case 0x1FF8: case 0x1FF9: case 0x1FFA: case 0x1FFB: case 0x1FFC: 
case 0x2126: 
case 0xAB65: goto _11;
default: goto _52;
}
}


    __quex_assert_no_passage();
_17:
    /* (557 from 544)  */
    ++(me->buffer._read_p);

    goto _171;


    __quex_assert_no_passage();
_18:
    /* (558 from 544)  */
    ++(me->buffer._read_p);

    input = *(me->buffer._read_p);


    __quex_debug_state(558);
goto _53;


    __quex_assert_no_passage();
_19:
    /* (559 from 559) (559 from 544)  */

    ++(me->buffer._read_p);

_175:
    input = *(me->buffer._read_p);


    __quex_debug_state(559);
switch( input ) {
case 0x0: goto _85;
case 0x2E: goto _26;
case 0x30: case 0x31: case 0x32: case 0x33: case 0x34: case 0x35: case 0x36: case 0x37: 
case 0x38: case 0x39: goto _19;
case 0x45: 
case 0x65: goto _27;
default: goto _54;
}


    __quex_assert_no_passage();
_84:
    /* (559 from RELOAD_FORWARD)  */
    goto _175;


    __quex_assert_no_passage();
_20:
    /* (560 from 544)  */
    ++(me->buffer._read_p);

    input = *(me->buffer._read_p);


    __quex_debug_state(560);
goto _55;


    __quex_assert_no_passage();
_21:
    /* (561 from 544)  */
    ++(me->buffer._read_p);

_178:
    input = *(me->buffer._read_p);


    __quex_debug_state(561);
if( input < 0x2072 ) {
if( input < 0xF8 ) {
switch( input ) {
case 0x0: goto _87;
case 0x41: case 0x42: case 0x43: case 0x44: case 0x45: case 0x46: case 0x47: 
case 0x48: case 0x49: case 0x4A: case 0x4B: case 0x4C: case 0x4D: case 0x4E: case 0x4F: 
case 0x50: case 0x51: case 0x52: case 0x53: case 0x54: case 0x55: case 0x56: case 0x57: 
case 0x58: case 0x59: case 0x5A: 
case 0x61: case 0x62: case 0x63: case 0x64: case 0x65: case 0x66: case 0x67: case 0x68: goto _8;
case 0x69: goto _24;
case 0x6A: case 0x6B: case 0x6C: case 0x6D: case 0x6E: case 0x6F: 
case 0x70: case 0x71: case 0x72: case 0x73: case 0x74: case 0x75: case 0x76: case 0x77: 
case 0x78: case 0x79: case 0x7A: 
case 0xAA: 
case 0xBA: 
case 0xC0: case 0xC1: case 0xC2: case 0xC3: case 0xC4: case 0xC5: case 0xC6: case 0xC7: 
case 0xC8: case 0xC9: case 0xCA: case 0xCB: case 0xCC: case 0xCD: case 0xCE: case 0xCF: 
case 0xD0: case 0xD1: case 0xD2: case 0xD3: case 0xD4: case 0xD5: case 0xD6: 
case 0xD8: case 0xD9: case 0xDA: case 0xDB: case 0xDC: case 0xDD: case 0xDE: case 0xDF: 
case 0xE0: case 0xE1: case 0xE2: case 0xE3: case 0xE4: case 0xE5: case 0xE6: case 0xE7: 
case 0xE8: case 0xE9: case 0xEA: case 0xEB: case 0xEC: case 0xED: case 0xEE: case 0xEF: 
case 0xF0: case 0xF1: case 0xF2: case 0xF3: case 0xF4: case 0xF5: case 0xF6: goto _8;
default: goto _45;
}
} else {
if( input < 0x1D62 ) {
if( input < 0x1D00 ) {
if     ( input < 0x2B9 )  goto _8;
else if( input < 0x2E0 )  goto _45;
else if( input < 0x2E5 )  goto _8;
else                      goto _45;
} else {
if     ( input < 0x1D26 )  goto _8;
else if( input < 0x1D2C )  goto _45;
else if( input < 0x1D5D )  goto _8;
else                       goto _45;
}
} else {
if( input < 0x1D79 ) {
if     ( input < 0x1D66 )  goto _8;
else if( input < 0x1D6B )  goto _45;
else if( input < 0x1D78 )  goto _8;
else                       goto _45;
} else {
if     ( input < 0x1DBF )  goto _8;
else if( input < 0x1E00 )  goto _45;
else if( input < 0x1F00 )  goto _8;
else if( input < 0x2071 )  goto _45;
else                       goto _8;
}
}
}
} else {
if( input < 0xA788 ) {
switch( input ) {
case 0x207F: 
case 0x2090: case 0x2091: case 0x2092: case 0x2093: case 0x2094: case 0x2095: case 0x2096: case 0x2097: 
case 0x2098: case 0x2099: case 0x209A: case 0x209B: case 0x209C: 
case 0x212A: case 0x212B: 
case 0x2132: 
case 0x214E: 
case 0x2160: case 0x2161: case 0x2162: case 0x2163: case 0x2164: case 0x2165: case 0x2166: case 0x2167: 
case 0x2168: case 0x2169: case 0x216A: case 0x216B: case 0x216C: case 0x216D: case 0x216E: case 0x216F: 
case 0x2170: case 0x2171: case 0x2172: case 0x2173: case 0x2174: case 0x2175: case 0x2176: case 0x2177: 
case 0x2178: case 0x2179: case 0x217A: case 0x217B: case 0x217C: case 0x217D: case 0x217E: case 0x217F: 
case 0x2180: case 0x2181: case 0x2182: case 0x2183: case 0x2184: case 0x2185: case 0x2186: case 0x2187: 
case 0x2188: 
case 0x2C60: case 0x2C61: case 0x2C62: case 0x2C63: case 0x2C64: case 0x2C65: case 0x2C66: case 0x2C67: 
case 0x2C68: case 0x2C69: case 0x2C6A: case 0x2C6B: case 0x2C6C: case 0x2C6D: case 0x2C6E: case 0x2C6F: 
case 0x2C70: case 0x2C71: case 0x2C72: case 0x2C73: case 0x2C74: case 0x2C75: case 0x2C76: case 0x2C77: 
case 0x2C78: case 0x2C79: case 0x2C7A: case 0x2C7B: case 0x2C7C: case 0x2C7D: case 0x2C7E: case 0x2C7F: 
case 0xA722: case 0xA723: case 0xA724: case 0xA725: case 0xA726: case 0xA727: 
case 0xA728: case 0xA729: case 0xA72A: case 0xA72B: case 0xA72C: case 0xA72D: case 0xA72E: case 0xA72F: 
case 0xA730: case 0xA731: case 0xA732: case 0xA733: case 0xA734: case 0xA735: case 0xA736: case 0xA737: 
case 0xA738: case 0xA739: case 0xA73A: case 0xA73B: case 0xA73C: case 0xA73D: case 0xA73E: case 0xA73F: 
case 0xA740: case 0xA741: case 0xA742: case 0xA743: case 0xA744: case 0xA745: case 0xA746: case 0xA747: 
case 0xA748: case 0xA749: case 0xA74A: case 0xA74B: case 0xA74C: case 0xA74D: case 0xA74E: case 0xA74F: 
case 0xA750: case 0xA751: case 0xA752: case 0xA753: case 0xA754: case 0xA755: case 0xA756: case 0xA757: 
case 0xA758: case 0xA759: case 0xA75A: case 0xA75B: case 0xA75C: case 0xA75D: case 0xA75E: case 0xA75F: 
case 0xA760: case 0xA761: case 0xA762: case 0xA763: case 0xA764: case 0xA765: case 0xA766: case 0xA767: 
case 0xA768: case 0xA769: case 0xA76A: case 0xA76B: case 0xA76C: case 0xA76D: case 0xA76E: case 0xA76F: 
case 0xA770: case 0xA771: case 0xA772: case 0xA773: case 0xA774: case 0xA775: case 0xA776: case 0xA777: 
case 0xA778: case 0xA779: case 0xA77A: case 0xA77B: case 0xA77C: case 0xA77D: case 0xA77E: case 0xA77F: 
case 0xA780: case 0xA781: case 0xA782: case 0xA783: case 0xA784: case 0xA785: case 0xA786: case 0xA787: goto _8;
default: goto _45;
}
} else {
switch( input ) {
case 0xA78B: case 0xA78C: case 0xA78D: case 0xA78E: case 0xA78F: 
case 0xA790: case 0xA791: case 0xA792: case 0xA793: case 0xA794: case 0xA795: case 0xA796: case 0xA797: 
case 0xA798: case 0xA799: case 0xA79A: case 0xA79B: case 0xA79C: case 0xA79D: case 0xA79E: case 0xA79F: 
case 0xA7A0: case 0xA7A1: case 0xA7A2: case 0xA7A3: case 0xA7A4: case 0xA7A5: case 0xA7A6: case 0xA7A7: 
case 0xA7A8: case 0xA7A9: case 0xA7AA: case 0xA7AB: case 0xA7AC: case 0xA7AD: 
case 0xA7B0: case 0xA7B1: case 0xA7B2: case 0xA7B3: case 0xA7B4: case 0xA7B5: case 0xA7B6: case 0xA7B7: 
case 0xA7F7: 
case 0xA7F8: case 0xA7F9: case 0xA7FA: case 0xA7FB: case 0xA7FC: case 0xA7FD: case 0xA7FE: case 0xA7FF: 
case 0xAB30: case 0xAB31: case 0xAB32: case 0xAB33: case 0xAB34: case 0xAB35: case 0xAB36: case 0xAB37: 
case 0xAB38: case 0xAB39: case 0xAB3A: case 0xAB3B: case 0xAB3C: case 0xAB3D: case 0xAB3E: case 0xAB3F: 
case 0xAB40: case 0xAB41: case 0xAB42: case 0xAB43: case 0xAB44: case 0xAB45: case 0xAB46: case 0xAB47: 
case 0xAB48: case 0xAB49: case 0xAB4A: case 0xAB4B: case 0xAB4C: case 0xAB4D: case 0xAB4E: case 0xAB4F: 
case 0xAB50: case 0xAB51: case 0xAB52: case 0xAB53: case 0xAB54: case 0xAB55: case 0xAB56: case 0xAB57: 
case 0xAB58: case 0xAB59: case 0xAB5A: 
case 0xAB5C: case 0xAB5D: case 0xAB5E: case 0xAB5F: 
case 0xAB60: case 0xAB61: case 0xAB62: case 0xAB63: case 0xAB64: 
case 0xFB00: case 0xFB01: case 0xFB02: case 0xFB03: case 0xFB04: case 0xFB05: case 0xFB06: 
case 0xFF21: case 0xFF22: case 0xFF23: case 0xFF24: case 0xFF25: case 0xFF26: case 0xFF27: 
case 0xFF28: case 0xFF29: case 0xFF2A: case 0xFF2B: case 0xFF2C: case 0xFF2D: case 0xFF2E: case 0xFF2F: 
case 0xFF30: case 0xFF31: case 0xFF32: case 0xFF33: case 0xFF34: case 0xFF35: case 0xFF36: case 0xFF37: 
case 0xFF38: case 0xFF39: case 0xFF3A: 
case 0xFF41: case 0xFF42: case 0xFF43: case 0xFF44: case 0xFF45: case 0xFF46: case 0xFF47: 
case 0xFF48: case 0xFF49: case 0xFF4A: case 0xFF4B: case 0xFF4C: case 0xFF4D: case 0xFF4E: case 0xFF4F: 
case 0xFF50: case 0xFF51: case 0xFF52: case 0xFF53: case 0xFF54: case 0xFF55: case 0xFF56: case 0xFF57: 
case 0xFF58: case 0xFF59: case 0xFF5A: goto _8;
default: goto _45;
}
}
}


    __quex_assert_no_passage();
_86:
    /* (561 from RELOAD_FORWARD)  */
    goto _178;


    __quex_assert_no_passage();
_22:
    /* (562 from 544)  */
    ++(me->buffer._read_p);

_180:
    input = *(me->buffer._read_p);


    __quex_debug_state(562);
if( input < 0x207F ) {
if( input < 0x2E0 ) {
switch( input ) {
case 0x0: goto _89;
case 0x1: case 0x2: case 0x3: case 0x4: case 0x5: case 0x6: case 0x7: 
case 0x8: case 0x9: case 0xA: case 0xB: case 0xC: case 0xD: case 0xE: case 0xF: 
case 0x10: case 0x11: case 0x12: case 0x13: case 0x14: case 0x15: case 0x16: case 0x17: 
case 0x18: case 0x19: case 0x1A: case 0x1B: case 0x1C: case 0x1D: case 0x1E: case 0x1F: 
case 0x20: case 0x21: case 0x22: case 0x23: case 0x24: case 0x25: case 0x26: case 0x27: 
case 0x28: case 0x29: case 0x2A: case 0x2B: case 0x2C: case 0x2D: case 0x2E: case 0x2F: 
case 0x30: case 0x31: case 0x32: case 0x33: case 0x34: case 0x35: case 0x36: case 0x37: 
case 0x38: case 0x39: case 0x3A: case 0x3B: case 0x3C: case 0x3D: case 0x3E: case 0x3F: 
case 0x40: 
case 0x5B: case 0x5C: case 0x5D: case 0x5E: case 0x5F: case 0x60: 
case 0x7B: case 0x7C: case 0x7D: case 0x7E: case 0x7F: 
case 0x80: case 0x81: case 0x82: case 0x83: case 0x84: case 0x85: case 0x86: case 0x87: 
case 0x88: case 0x89: case 0x8A: case 0x8B: case 0x8C: case 0x8D: case 0x8E: case 0x8F: 
case 0x90: case 0x91: case 0x92: case 0x93: case 0x94: case 0x95: case 0x96: case 0x97: 
case 0x98: case 0x99: case 0x9A: case 0x9B: case 0x9C: case 0x9D: case 0x9E: case 0x9F: 
case 0xA0: case 0xA1: case 0xA2: case 0xA3: case 0xA4: case 0xA5: case 0xA6: case 0xA7: 
case 0xA8: case 0xA9: 
case 0xAB: case 0xAC: case 0xAD: case 0xAE: case 0xAF: 
case 0xB0: case 0xB1: case 0xB2: case 0xB3: case 0xB4: case 0xB5: case 0xB6: case 0xB7: 
case 0xB8: case 0xB9: 
case 0xBB: case 0xBC: case 0xBD: case 0xBE: case 0xBF: 
case 0xD7: 
case 0xF7: 
case 0x2B9: case 0x2BA: case 0x2BB: case 0x2BC: case 0x2BD: case 0x2BE: case 0x2BF: 
case 0x2C0: case 0x2C1: case 0x2C2: case 0x2C3: case 0x2C4: case 0x2C5: case 0x2C6: case 0x2C7: 
case 0x2C8: case 0x2C9: case 0x2CA: case 0x2CB: case 0x2CC: case 0x2CD: case 0x2CE: case 0x2CF: 
case 0x2D0: case 0x2D1: case 0x2D2: case 0x2D3: case 0x2D4: case 0x2D5: case 0x2D6: case 0x2D7: 
case 0x2D8: case 0x2D9: case 0x2DA: case 0x2DB: case 0x2DC: case 0x2DD: case 0x2DE: case 0x2DF: goto _56;
default: goto _8;
}
} else {
if( input < 0x1D6B ) {
switch( input ) {
case 0x2E0: case 0x2E1: case 0x2E2: case 0x2E3: case 0x2E4: 
case 0x1D00: case 0x1D01: case 0x1D02: case 0x1D03: case 0x1D04: case 0x1D05: case 0x1D06: case 0x1D07: 
case 0x1D08: case 0x1D09: case 0x1D0A: case 0x1D0B: case 0x1D0C: case 0x1D0D: case 0x1D0E: case 0x1D0F: 
case 0x1D10: case 0x1D11: case 0x1D12: case 0x1D13: case 0x1D14: case 0x1D15: case 0x1D16: case 0x1D17: 
case 0x1D18: case 0x1D19: case 0x1D1A: case 0x1D1B: case 0x1D1C: case 0x1D1D: case 0x1D1E: case 0x1D1F: 
case 0x1D20: case 0x1D21: case 0x1D22: case 0x1D23: case 0x1D24: case 0x1D25: 
case 0x1D2C: case 0x1D2D: case 0x1D2E: case 0x1D2F: 
case 0x1D30: case 0x1D31: case 0x1D32: case 0x1D33: case 0x1D34: case 0x1D35: case 0x1D36: case 0x1D37: 
case 0x1D38: case 0x1D39: case 0x1D3A: case 0x1D3B: case 0x1D3C: case 0x1D3D: case 0x1D3E: case 0x1D3F: 
case 0x1D40: case 0x1D41: case 0x1D42: case 0x1D43: case 0x1D44: case 0x1D45: case 0x1D46: case 0x1D47: 
case 0x1D48: case 0x1D49: case 0x1D4A: case 0x1D4B: case 0x1D4C: case 0x1D4D: case 0x1D4E: case 0x1D4F: 
case 0x1D50: case 0x1D51: case 0x1D52: case 0x1D53: case 0x1D54: case 0x1D55: case 0x1D56: case 0x1D57: 
case 0x1D58: case 0x1D59: case 0x1D5A: case 0x1D5B: case 0x1D5C: 
case 0x1D62: case 0x1D63: case 0x1D64: case 0x1D65: goto _8;
default: goto _56;
}
} else {
if( input < 0x1E00 ) {
if     ( input < 0x1D78 )   goto _8;
else if( input == 0x1D78 )  goto _56;
else if( input < 0x1DBF )   goto _8;
else                        goto _56;
} else {
if     ( input < 0x1F00 )   goto _8;
else if( input < 0x2071 )   goto _56;
else if( input == 0x2071 )  goto _8;
else                        goto _56;
}
}
}
} else {
if( input < 0xA78B ) {
switch( input ) {
case 0x207F: 
case 0x2090: case 0x2091: case 0x2092: case 0x2093: case 0x2094: case 0x2095: case 0x2096: case 0x2097: 
case 0x2098: case 0x2099: case 0x209A: case 0x209B: case 0x209C: 
case 0x212A: case 0x212B: 
case 0x2132: 
case 0x214E: 
case 0x2160: case 0x2161: case 0x2162: case 0x2163: case 0x2164: case 0x2165: case 0x2166: case 0x2167: 
case 0x2168: case 0x2169: case 0x216A: case 0x216B: case 0x216C: case 0x216D: case 0x216E: case 0x216F: 
case 0x2170: case 0x2171: case 0x2172: case 0x2173: case 0x2174: case 0x2175: case 0x2176: case 0x2177: 
case 0x2178: case 0x2179: case 0x217A: case 0x217B: case 0x217C: case 0x217D: case 0x217E: case 0x217F: 
case 0x2180: case 0x2181: case 0x2182: case 0x2183: case 0x2184: case 0x2185: case 0x2186: case 0x2187: 
case 0x2188: 
case 0x2C60: case 0x2C61: case 0x2C62: case 0x2C63: case 0x2C64: case 0x2C65: case 0x2C66: case 0x2C67: 
case 0x2C68: case 0x2C69: case 0x2C6A: case 0x2C6B: case 0x2C6C: case 0x2C6D: case 0x2C6E: case 0x2C6F: 
case 0x2C70: case 0x2C71: case 0x2C72: case 0x2C73: case 0x2C74: case 0x2C75: case 0x2C76: case 0x2C77: 
case 0x2C78: case 0x2C79: case 0x2C7A: case 0x2C7B: case 0x2C7C: case 0x2C7D: case 0x2C7E: case 0x2C7F: 
case 0xA722: case 0xA723: case 0xA724: case 0xA725: case 0xA726: case 0xA727: 
case 0xA728: case 0xA729: case 0xA72A: case 0xA72B: case 0xA72C: case 0xA72D: case 0xA72E: case 0xA72F: 
case 0xA730: case 0xA731: case 0xA732: case 0xA733: case 0xA734: case 0xA735: case 0xA736: case 0xA737: 
case 0xA738: case 0xA739: case 0xA73A: case 0xA73B: case 0xA73C: case 0xA73D: case 0xA73E: case 0xA73F: 
case 0xA740: case 0xA741: case 0xA742: case 0xA743: case 0xA744: case 0xA745: case 0xA746: case 0xA747: 
case 0xA748: case 0xA749: case 0xA74A: case 0xA74B: case 0xA74C: case 0xA74D: case 0xA74E: case 0xA74F: 
case 0xA750: case 0xA751: case 0xA752: case 0xA753: case 0xA754: case 0xA755: case 0xA756: case 0xA757: 
case 0xA758: case 0xA759: case 0xA75A: case 0xA75B: case 0xA75C: case 0xA75D: case 0xA75E: case 0xA75F: 
case 0xA760: case 0xA761: case 0xA762: case 0xA763: case 0xA764: case 0xA765: case 0xA766: case 0xA767: 
case 0xA768: case 0xA769: case 0xA76A: case 0xA76B: case 0xA76C: case 0xA76D: case 0xA76E: case 0xA76F: 
case 0xA770: case 0xA771: case 0xA772: case 0xA773: case 0xA774: case 0xA775: case 0xA776: case 0xA777: 
case 0xA778: case 0xA779: case 0xA77A: case 0xA77B: case 0xA77C: case 0xA77D: case 0xA77E: case 0xA77F: 
case 0xA780: case 0xA781: case 0xA782: case 0xA783: case 0xA784: case 0xA785: case 0xA786: case 0xA787: goto _8;
default: goto _56;
}
} else {
switch( input ) {
case 0xA78B: case 0xA78C: case 0xA78D: case 0xA78E: case 0xA78F: 
case 0xA790: case 0xA791: case 0xA792: case 0xA793: case 0xA794: case 0xA795: case 0xA796: case 0xA797: 
case 0xA798: case 0xA799: case 0xA79A: case 0xA79B: case 0xA79C: case 0xA79D: case 0xA79E: case 0xA79F: 
case 0xA7A0: case 0xA7A1: case 0xA7A2: case 0xA7A3: case 0xA7A4: case 0xA7A5: case 0xA7A6: case 0xA7A7: 
case 0xA7A8: case 0xA7A9: case 0xA7AA: case 0xA7AB: case 0xA7AC: case 0xA7AD: 
case 0xA7B0: case 0xA7B1: case 0xA7B2: case 0xA7B3: case 0xA7B4: case 0xA7B5: case 0xA7B6: case 0xA7B7: 
case 0xA7F7: 
case 0xA7F8: case 0xA7F9: case 0xA7FA: case 0xA7FB: case 0xA7FC: case 0xA7FD: case 0xA7FE: case 0xA7FF: 
case 0xAB30: case 0xAB31: case 0xAB32: case 0xAB33: case 0xAB34: case 0xAB35: case 0xAB36: case 0xAB37: 
case 0xAB38: case 0xAB39: case 0xAB3A: case 0xAB3B: case 0xAB3C: case 0xAB3D: case 0xAB3E: case 0xAB3F: 
case 0xAB40: case 0xAB41: case 0xAB42: case 0xAB43: case 0xAB44: case 0xAB45: case 0xAB46: case 0xAB47: 
case 0xAB48: case 0xAB49: case 0xAB4A: case 0xAB4B: case 0xAB4C: case 0xAB4D: case 0xAB4E: case 0xAB4F: 
case 0xAB50: case 0xAB51: case 0xAB52: case 0xAB53: case 0xAB54: case 0xAB55: case 0xAB56: case 0xAB57: 
case 0xAB58: case 0xAB59: case 0xAB5A: 
case 0xAB5C: case 0xAB5D: case 0xAB5E: case 0xAB5F: 
case 0xAB60: case 0xAB61: case 0xAB62: case 0xAB63: case 0xAB64: 
case 0xFB00: case 0xFB01: case 0xFB02: case 0xFB03: case 0xFB04: case 0xFB05: case 0xFB06: 
case 0xFF21: case 0xFF22: case 0xFF23: case 0xFF24: case 0xFF25: case 0xFF26: case 0xFF27: 
case 0xFF28: case 0xFF29: case 0xFF2A: case 0xFF2B: case 0xFF2C: case 0xFF2D: case 0xFF2E: case 0xFF2F: 
case 0xFF30: case 0xFF31: case 0xFF32: case 0xFF33: case 0xFF34: case 0xFF35: case 0xFF36: case 0xFF37: 
case 0xFF38: case 0xFF39: case 0xFF3A: 
case 0xFF41: case 0xFF42: case 0xFF43: case 0xFF44: case 0xFF45: case 0xFF46: case 0xFF47: 
case 0xFF48: case 0xFF49: case 0xFF4A: case 0xFF4B: case 0xFF4C: case 0xFF4D: case 0xFF4E: case 0xFF4F: 
case 0xFF50: case 0xFF51: case 0xFF52: case 0xFF53: case 0xFF54: case 0xFF55: case 0xFF56: case 0xFF57: 
case 0xFF58: case 0xFF59: case 0xFF5A: goto _8;
default: goto _56;
}
}
}


    __quex_assert_no_passage();
_88:
    /* (562 from RELOAD_FORWARD)  */
    goto _180;


    __quex_assert_no_passage();
_23:
    /* (563 from 544)  */
    ++(me->buffer._read_p);

    input = *(me->buffer._read_p);


    __quex_debug_state(563);
goto _57;


    __quex_assert_no_passage();
_90:
    /* (564 from RELOAD_FORWARD)  */
_183:
    input = *(me->buffer._read_p);


    __quex_debug_state(564);
if( input < 0x2072 ) {
if( input < 0xF8 ) {
switch( input ) {
case 0x0: goto _91;
case 0x41: case 0x42: case 0x43: case 0x44: case 0x45: case 0x46: case 0x47: 
case 0x48: case 0x49: case 0x4A: case 0x4B: case 0x4C: case 0x4D: case 0x4E: case 0x4F: 
case 0x50: case 0x51: case 0x52: case 0x53: case 0x54: case 0x55: case 0x56: case 0x57: 
case 0x58: case 0x59: case 0x5A: 
case 0x61: case 0x62: case 0x63: case 0x64: case 0x65: case 0x66: case 0x67: 
case 0x68: case 0x69: case 0x6A: case 0x6B: case 0x6C: case 0x6D: goto _8;
case 0x6E: goto _25;
case 0x6F: 
case 0x70: case 0x71: case 0x72: case 0x73: case 0x74: case 0x75: case 0x76: case 0x77: 
case 0x78: case 0x79: case 0x7A: 
case 0xAA: 
case 0xBA: 
case 0xC0: case 0xC1: case 0xC2: case 0xC3: case 0xC4: case 0xC5: case 0xC6: case 0xC7: 
case 0xC8: case 0xC9: case 0xCA: case 0xCB: case 0xCC: case 0xCD: case 0xCE: case 0xCF: 
case 0xD0: case 0xD1: case 0xD2: case 0xD3: case 0xD4: case 0xD5: case 0xD6: 
case 0xD8: case 0xD9: case 0xDA: case 0xDB: case 0xDC: case 0xDD: case 0xDE: case 0xDF: 
case 0xE0: case 0xE1: case 0xE2: case 0xE3: case 0xE4: case 0xE5: case 0xE6: case 0xE7: 
case 0xE8: case 0xE9: case 0xEA: case 0xEB: case 0xEC: case 0xED: case 0xEE: case 0xEF: 
case 0xF0: case 0xF1: case 0xF2: case 0xF3: case 0xF4: case 0xF5: case 0xF6: goto _8;
default: goto _45;
}
} else {
if( input < 0x1D62 ) {
if( input < 0x1D00 ) {
if     ( input < 0x2B9 )  goto _8;
else if( input < 0x2E0 )  goto _45;
else if( input < 0x2E5 )  goto _8;
else                      goto _45;
} else {
if     ( input < 0x1D26 )  goto _8;
else if( input < 0x1D2C )  goto _45;
else if( input < 0x1D5D )  goto _8;
else                       goto _45;
}
} else {
if( input < 0x1D79 ) {
if     ( input < 0x1D66 )  goto _8;
else if( input < 0x1D6B )  goto _45;
else if( input < 0x1D78 )  goto _8;
else                       goto _45;
} else {
if     ( input < 0x1DBF )  goto _8;
else if( input < 0x1E00 )  goto _45;
else if( input < 0x1F00 )  goto _8;
else if( input < 0x2071 )  goto _45;
else                       goto _8;
}
}
}
} else {
if( input < 0xA788 ) {
switch( input ) {
case 0x207F: 
case 0x2090: case 0x2091: case 0x2092: case 0x2093: case 0x2094: case 0x2095: case 0x2096: case 0x2097: 
case 0x2098: case 0x2099: case 0x209A: case 0x209B: case 0x209C: 
case 0x212A: case 0x212B: 
case 0x2132: 
case 0x214E: 
case 0x2160: case 0x2161: case 0x2162: case 0x2163: case 0x2164: case 0x2165: case 0x2166: case 0x2167: 
case 0x2168: case 0x2169: case 0x216A: case 0x216B: case 0x216C: case 0x216D: case 0x216E: case 0x216F: 
case 0x2170: case 0x2171: case 0x2172: case 0x2173: case 0x2174: case 0x2175: case 0x2176: case 0x2177: 
case 0x2178: case 0x2179: case 0x217A: case 0x217B: case 0x217C: case 0x217D: case 0x217E: case 0x217F: 
case 0x2180: case 0x2181: case 0x2182: case 0x2183: case 0x2184: case 0x2185: case 0x2186: case 0x2187: 
case 0x2188: 
case 0x2C60: case 0x2C61: case 0x2C62: case 0x2C63: case 0x2C64: case 0x2C65: case 0x2C66: case 0x2C67: 
case 0x2C68: case 0x2C69: case 0x2C6A: case 0x2C6B: case 0x2C6C: case 0x2C6D: case 0x2C6E: case 0x2C6F: 
case 0x2C70: case 0x2C71: case 0x2C72: case 0x2C73: case 0x2C74: case 0x2C75: case 0x2C76: case 0x2C77: 
case 0x2C78: case 0x2C79: case 0x2C7A: case 0x2C7B: case 0x2C7C: case 0x2C7D: case 0x2C7E: case 0x2C7F: 
case 0xA722: case 0xA723: case 0xA724: case 0xA725: case 0xA726: case 0xA727: 
case 0xA728: case 0xA729: case 0xA72A: case 0xA72B: case 0xA72C: case 0xA72D: case 0xA72E: case 0xA72F: 
case 0xA730: case 0xA731: case 0xA732: case 0xA733: case 0xA734: case 0xA735: case 0xA736: case 0xA737: 
case 0xA738: case 0xA739: case 0xA73A: case 0xA73B: case 0xA73C: case 0xA73D: case 0xA73E: case 0xA73F: 
case 0xA740: case 0xA741: case 0xA742: case 0xA743: case 0xA744: case 0xA745: case 0xA746: case 0xA747: 
case 0xA748: case 0xA749: case 0xA74A: case 0xA74B: case 0xA74C: case 0xA74D: case 0xA74E: case 0xA74F: 
case 0xA750: case 0xA751: case 0xA752: case 0xA753: case 0xA754: case 0xA755: case 0xA756: case 0xA757: 
case 0xA758: case 0xA759: case 0xA75A: case 0xA75B: case 0xA75C: case 0xA75D: case 0xA75E: case 0xA75F: 
case 0xA760: case 0xA761: case 0xA762: case 0xA763: case 0xA764: case 0xA765: case 0xA766: case 0xA767: 
case 0xA768: case 0xA769: case 0xA76A: case 0xA76B: case 0xA76C: case 0xA76D: case 0xA76E: case 0xA76F: 
case 0xA770: case 0xA771: case 0xA772: case 0xA773: case 0xA774: case 0xA775: case 0xA776: case 0xA777: 
case 0xA778: case 0xA779: case 0xA77A: case 0xA77B: case 0xA77C: case 0xA77D: case 0xA77E: case 0xA77F: 
case 0xA780: case 0xA781: case 0xA782: case 0xA783: case 0xA784: case 0xA785: case 0xA786: case 0xA787: goto _8;
default: goto _45;
}
} else {
switch( input ) {
case 0xA78B: case 0xA78C: case 0xA78D: case 0xA78E: case 0xA78F: 
case 0xA790: case 0xA791: case 0xA792: case 0xA793: case 0xA794: case 0xA795: case 0xA796: case 0xA797: 
case 0xA798: case 0xA799: case 0xA79A: case 0xA79B: case 0xA79C: case 0xA79D: case 0xA79E: case 0xA79F: 
case 0xA7A0: case 0xA7A1: case 0xA7A2: case 0xA7A3: case 0xA7A4: case 0xA7A5: case 0xA7A6: case 0xA7A7: 
case 0xA7A8: case 0xA7A9: case 0xA7AA: case 0xA7AB: case 0xA7AC: case 0xA7AD: 
case 0xA7B0: case 0xA7B1: case 0xA7B2: case 0xA7B3: case 0xA7B4: case 0xA7B5: case 0xA7B6: case 0xA7B7: 
case 0xA7F7: 
case 0xA7F8: case 0xA7F9: case 0xA7FA: case 0xA7FB: case 0xA7FC: case 0xA7FD: case 0xA7FE: case 0xA7FF: 
case 0xAB30: case 0xAB31: case 0xAB32: case 0xAB33: case 0xAB34: case 0xAB35: case 0xAB36: case 0xAB37: 
case 0xAB38: case 0xAB39: case 0xAB3A: case 0xAB3B: case 0xAB3C: case 0xAB3D: case 0xAB3E: case 0xAB3F: 
case 0xAB40: case 0xAB41: case 0xAB42: case 0xAB43: case 0xAB44: case 0xAB45: case 0xAB46: case 0xAB47: 
case 0xAB48: case 0xAB49: case 0xAB4A: case 0xAB4B: case 0xAB4C: case 0xAB4D: case 0xAB4E: case 0xAB4F: 
case 0xAB50: case 0xAB51: case 0xAB52: case 0xAB53: case 0xAB54: case 0xAB55: case 0xAB56: case 0xAB57: 
case 0xAB58: case 0xAB59: case 0xAB5A: 
case 0xAB5C: case 0xAB5D: case 0xAB5E: case 0xAB5F: 
case 0xAB60: case 0xAB61: case 0xAB62: case 0xAB63: case 0xAB64: 
case 0xFB00: case 0xFB01: case 0xFB02: case 0xFB03: case 0xFB04: case 0xFB05: case 0xFB06: 
case 0xFF21: case 0xFF22: case 0xFF23: case 0xFF24: case 0xFF25: case 0xFF26: case 0xFF27: 
case 0xFF28: case 0xFF29: case 0xFF2A: case 0xFF2B: case 0xFF2C: case 0xFF2D: case 0xFF2E: case 0xFF2F: 
case 0xFF30: case 0xFF31: case 0xFF32: case 0xFF33: case 0xFF34: case 0xFF35: case 0xFF36: case 0xFF37: 
case 0xFF38: case 0xFF39: case 0xFF3A: 
case 0xFF41: case 0xFF42: case 0xFF43: case 0xFF44: case 0xFF45: case 0xFF46: case 0xFF47: 
case 0xFF48: case 0xFF49: case 0xFF4A: case 0xFF4B: case 0xFF4C: case 0xFF4D: case 0xFF4E: case 0xFF4F: 
case 0xFF50: case 0xFF51: case 0xFF52: case 0xFF53: case 0xFF54: case 0xFF55: case 0xFF56: case 0xFF57: 
case 0xFF58: case 0xFF59: case 0xFF5A: goto _8;
default: goto _45;
}
}
}


    __quex_assert_no_passage();
_24:
    /* (564 from 561)  */
    ++(me->buffer._read_p);

    goto _183;


    __quex_assert_no_passage();
_92:
    /* (565 from RELOAD_FORWARD)  */
_185:
    input = *(me->buffer._read_p);


    __quex_debug_state(565);
if( input < 0x207F ) {
if( input < 0x2E0 ) {
switch( input ) {
case 0x0: goto _93;
case 0x1: case 0x2: case 0x3: case 0x4: case 0x5: case 0x6: case 0x7: 
case 0x8: case 0x9: case 0xA: case 0xB: case 0xC: case 0xD: case 0xE: case 0xF: 
case 0x10: case 0x11: case 0x12: case 0x13: case 0x14: case 0x15: case 0x16: case 0x17: 
case 0x18: case 0x19: case 0x1A: case 0x1B: case 0x1C: case 0x1D: case 0x1E: case 0x1F: 
case 0x20: case 0x21: case 0x22: case 0x23: case 0x24: case 0x25: case 0x26: case 0x27: 
case 0x28: case 0x29: case 0x2A: case 0x2B: case 0x2C: case 0x2D: case 0x2E: case 0x2F: 
case 0x30: case 0x31: case 0x32: case 0x33: case 0x34: case 0x35: case 0x36: case 0x37: 
case 0x38: case 0x39: case 0x3A: case 0x3B: case 0x3C: case 0x3D: case 0x3E: case 0x3F: 
case 0x40: 
case 0x5B: case 0x5C: case 0x5D: case 0x5E: case 0x5F: case 0x60: 
case 0x7B: case 0x7C: case 0x7D: case 0x7E: case 0x7F: 
case 0x80: case 0x81: case 0x82: case 0x83: case 0x84: case 0x85: case 0x86: case 0x87: 
case 0x88: case 0x89: case 0x8A: case 0x8B: case 0x8C: case 0x8D: case 0x8E: case 0x8F: 
case 0x90: case 0x91: case 0x92: case 0x93: case 0x94: case 0x95: case 0x96: case 0x97: 
case 0x98: case 0x99: case 0x9A: case 0x9B: case 0x9C: case 0x9D: case 0x9E: case 0x9F: 
case 0xA0: case 0xA1: case 0xA2: case 0xA3: case 0xA4: case 0xA5: case 0xA6: case 0xA7: 
case 0xA8: case 0xA9: 
case 0xAB: case 0xAC: case 0xAD: case 0xAE: case 0xAF: 
case 0xB0: case 0xB1: case 0xB2: case 0xB3: case 0xB4: case 0xB5: case 0xB6: case 0xB7: 
case 0xB8: case 0xB9: 
case 0xBB: case 0xBC: case 0xBD: case 0xBE: case 0xBF: 
case 0xD7: 
case 0xF7: 
case 0x2B9: case 0x2BA: case 0x2BB: case 0x2BC: case 0x2BD: case 0x2BE: case 0x2BF: 
case 0x2C0: case 0x2C1: case 0x2C2: case 0x2C3: case 0x2C4: case 0x2C5: case 0x2C6: case 0x2C7: 
case 0x2C8: case 0x2C9: case 0x2CA: case 0x2CB: case 0x2CC: case 0x2CD: case 0x2CE: case 0x2CF: 
case 0x2D0: case 0x2D1: case 0x2D2: case 0x2D3: case 0x2D4: case 0x2D5: case 0x2D6: case 0x2D7: 
case 0x2D8: case 0x2D9: case 0x2DA: case 0x2DB: case 0x2DC: case 0x2DD: case 0x2DE: case 0x2DF: goto _58;
default: goto _8;
}
} else {
if( input < 0x1D6B ) {
switch( input ) {
case 0x2E0: case 0x2E1: case 0x2E2: case 0x2E3: case 0x2E4: 
case 0x1D00: case 0x1D01: case 0x1D02: case 0x1D03: case 0x1D04: case 0x1D05: case 0x1D06: case 0x1D07: 
case 0x1D08: case 0x1D09: case 0x1D0A: case 0x1D0B: case 0x1D0C: case 0x1D0D: case 0x1D0E: case 0x1D0F: 
case 0x1D10: case 0x1D11: case 0x1D12: case 0x1D13: case 0x1D14: case 0x1D15: case 0x1D16: case 0x1D17: 
case 0x1D18: case 0x1D19: case 0x1D1A: case 0x1D1B: case 0x1D1C: case 0x1D1D: case 0x1D1E: case 0x1D1F: 
case 0x1D20: case 0x1D21: case 0x1D22: case 0x1D23: case 0x1D24: case 0x1D25: 
case 0x1D2C: case 0x1D2D: case 0x1D2E: case 0x1D2F: 
case 0x1D30: case 0x1D31: case 0x1D32: case 0x1D33: case 0x1D34: case 0x1D35: case 0x1D36: case 0x1D37: 
case 0x1D38: case 0x1D39: case 0x1D3A: case 0x1D3B: case 0x1D3C: case 0x1D3D: case 0x1D3E: case 0x1D3F: 
case 0x1D40: case 0x1D41: case 0x1D42: case 0x1D43: case 0x1D44: case 0x1D45: case 0x1D46: case 0x1D47: 
case 0x1D48: case 0x1D49: case 0x1D4A: case 0x1D4B: case 0x1D4C: case 0x1D4D: case 0x1D4E: case 0x1D4F: 
case 0x1D50: case 0x1D51: case 0x1D52: case 0x1D53: case 0x1D54: case 0x1D55: case 0x1D56: case 0x1D57: 
case 0x1D58: case 0x1D59: case 0x1D5A: case 0x1D5B: case 0x1D5C: 
case 0x1D62: case 0x1D63: case 0x1D64: case 0x1D65: goto _8;
default: goto _58;
}
} else {
if( input < 0x1E00 ) {
if     ( input < 0x1D78 )   goto _8;
else if( input == 0x1D78 )  goto _58;
else if( input < 0x1DBF )   goto _8;
else                        goto _58;
} else {
if     ( input < 0x1F00 )   goto _8;
else if( input < 0x2071 )   goto _58;
else if( input == 0x2071 )  goto _8;
else                        goto _58;
}
}
}
} else {
if( input < 0xA78B ) {
switch( input ) {
case 0x207F: 
case 0x2090: case 0x2091: case 0x2092: case 0x2093: case 0x2094: case 0x2095: case 0x2096: case 0x2097: 
case 0x2098: case 0x2099: case 0x209A: case 0x209B: case 0x209C: 
case 0x212A: case 0x212B: 
case 0x2132: 
case 0x214E: 
case 0x2160: case 0x2161: case 0x2162: case 0x2163: case 0x2164: case 0x2165: case 0x2166: case 0x2167: 
case 0x2168: case 0x2169: case 0x216A: case 0x216B: case 0x216C: case 0x216D: case 0x216E: case 0x216F: 
case 0x2170: case 0x2171: case 0x2172: case 0x2173: case 0x2174: case 0x2175: case 0x2176: case 0x2177: 
case 0x2178: case 0x2179: case 0x217A: case 0x217B: case 0x217C: case 0x217D: case 0x217E: case 0x217F: 
case 0x2180: case 0x2181: case 0x2182: case 0x2183: case 0x2184: case 0x2185: case 0x2186: case 0x2187: 
case 0x2188: 
case 0x2C60: case 0x2C61: case 0x2C62: case 0x2C63: case 0x2C64: case 0x2C65: case 0x2C66: case 0x2C67: 
case 0x2C68: case 0x2C69: case 0x2C6A: case 0x2C6B: case 0x2C6C: case 0x2C6D: case 0x2C6E: case 0x2C6F: 
case 0x2C70: case 0x2C71: case 0x2C72: case 0x2C73: case 0x2C74: case 0x2C75: case 0x2C76: case 0x2C77: 
case 0x2C78: case 0x2C79: case 0x2C7A: case 0x2C7B: case 0x2C7C: case 0x2C7D: case 0x2C7E: case 0x2C7F: 
case 0xA722: case 0xA723: case 0xA724: case 0xA725: case 0xA726: case 0xA727: 
case 0xA728: case 0xA729: case 0xA72A: case 0xA72B: case 0xA72C: case 0xA72D: case 0xA72E: case 0xA72F: 
case 0xA730: case 0xA731: case 0xA732: case 0xA733: case 0xA734: case 0xA735: case 0xA736: case 0xA737: 
case 0xA738: case 0xA739: case 0xA73A: case 0xA73B: case 0xA73C: case 0xA73D: case 0xA73E: case 0xA73F: 
case 0xA740: case 0xA741: case 0xA742: case 0xA743: case 0xA744: case 0xA745: case 0xA746: case 0xA747: 
case 0xA748: case 0xA749: case 0xA74A: case 0xA74B: case 0xA74C: case 0xA74D: case 0xA74E: case 0xA74F: 
case 0xA750: case 0xA751: case 0xA752: case 0xA753: case 0xA754: case 0xA755: case 0xA756: case 0xA757: 
case 0xA758: case 0xA759: case 0xA75A: case 0xA75B: case 0xA75C: case 0xA75D: case 0xA75E: case 0xA75F: 
case 0xA760: case 0xA761: case 0xA762: case 0xA763: case 0xA764: case 0xA765: case 0xA766: case 0xA767: 
case 0xA768: case 0xA769: case 0xA76A: case 0xA76B: case 0xA76C: case 0xA76D: case 0xA76E: case 0xA76F: 
case 0xA770: case 0xA771: case 0xA772: case 0xA773: case 0xA774: case 0xA775: case 0xA776: case 0xA777: 
case 0xA778: case 0xA779: case 0xA77A: case 0xA77B: case 0xA77C: case 0xA77D: case 0xA77E: case 0xA77F: 
case 0xA780: case 0xA781: case 0xA782: case 0xA783: case 0xA784: case 0xA785: case 0xA786: case 0xA787: goto _8;
default: goto _58;
}
} else {
switch( input ) {
case 0xA78B: case 0xA78C: case 0xA78D: case 0xA78E: case 0xA78F: 
case 0xA790: case 0xA791: case 0xA792: case 0xA793: case 0xA794: case 0xA795: case 0xA796: case 0xA797: 
case 0xA798: case 0xA799: case 0xA79A: case 0xA79B: case 0xA79C: case 0xA79D: case 0xA79E: case 0xA79F: 
case 0xA7A0: case 0xA7A1: case 0xA7A2: case 0xA7A3: case 0xA7A4: case 0xA7A5: case 0xA7A6: case 0xA7A7: 
case 0xA7A8: case 0xA7A9: case 0xA7AA: case 0xA7AB: case 0xA7AC: case 0xA7AD: 
case 0xA7B0: case 0xA7B1: case 0xA7B2: case 0xA7B3: case 0xA7B4: case 0xA7B5: case 0xA7B6: case 0xA7B7: 
case 0xA7F7: 
case 0xA7F8: case 0xA7F9: case 0xA7FA: case 0xA7FB: case 0xA7FC: case 0xA7FD: case 0xA7FE: case 0xA7FF: 
case 0xAB30: case 0xAB31: case 0xAB32: case 0xAB33: case 0xAB34: case 0xAB35: case 0xAB36: case 0xAB37: 
case 0xAB38: case 0xAB39: case 0xAB3A: case 0xAB3B: case 0xAB3C: case 0xAB3D: case 0xAB3E: case 0xAB3F: 
case 0xAB40: case 0xAB41: case 0xAB42: case 0xAB43: case 0xAB44: case 0xAB45: case 0xAB46: case 0xAB47: 
case 0xAB48: case 0xAB49: case 0xAB4A: case 0xAB4B: case 0xAB4C: case 0xAB4D: case 0xAB4E: case 0xAB4F: 
case 0xAB50: case 0xAB51: case 0xAB52: case 0xAB53: case 0xAB54: case 0xAB55: case 0xAB56: case 0xAB57: 
case 0xAB58: case 0xAB59: case 0xAB5A: 
case 0xAB5C: case 0xAB5D: case 0xAB5E: case 0xAB5F: 
case 0xAB60: case 0xAB61: case 0xAB62: case 0xAB63: case 0xAB64: 
case 0xFB00: case 0xFB01: case 0xFB02: case 0xFB03: case 0xFB04: case 0xFB05: case 0xFB06: 
case 0xFF21: case 0xFF22: case 0xFF23: case 0xFF24: case 0xFF25: case 0xFF26: case 0xFF27: 
case 0xFF28: case 0xFF29: case 0xFF2A: case 0xFF2B: case 0xFF2C: case 0xFF2D: case 0xFF2E: case 0xFF2F: 
case 0xFF30: case 0xFF31: case 0xFF32: case 0xFF33: case 0xFF34: case 0xFF35: case 0xFF36: case 0xFF37: 
case 0xFF38: case 0xFF39: case 0xFF3A: 
case 0xFF41: case 0xFF42: case 0xFF43: case 0xFF44: case 0xFF45: case 0xFF46: case 0xFF47: 
case 0xFF48: case 0xFF49: case 0xFF4A: case 0xFF4B: case 0xFF4C: case 0xFF4D: case 0xFF4E: case 0xFF4F: 
case 0xFF50: case 0xFF51: case 0xFF52: case 0xFF53: case 0xFF54: case 0xFF55: case 0xFF56: case 0xFF57: 
case 0xFF58: case 0xFF59: case 0xFF5A: goto _8;
default: goto _58;
}
}
}


    __quex_assert_no_passage();
_25:
    /* (565 from 564)  */
    ++(me->buffer._read_p);

    goto _185;


    __quex_assert_no_passage();
_26:
    /* (566 from 559) (566 from 566)  */

    ++(me->buffer._read_p);

_188:
    input = *(me->buffer._read_p);


    __quex_debug_state(566);
switch( input ) {
case 0x0: goto _95;
case 0x30: case 0x31: case 0x32: case 0x33: case 0x34: case 0x35: case 0x36: case 0x37: 
case 0x38: case 0x39: goto _26;
case 0x45: 
case 0x65: goto _30;
default: goto _59;
}


    __quex_assert_no_passage();
_94:
    /* (566 from RELOAD_FORWARD)  */
    goto _188;


    __quex_assert_no_passage();
_27:
    /* (567 from 559)  */
    ++(me->buffer._read_p);

_190:
    input = *(me->buffer._read_p);


    __quex_debug_state(567);
switch( input ) {
case 0x0: goto _97;
case 0x2B: 
case 0x2D: goto _28;
case 0x30: case 0x31: case 0x32: case 0x33: case 0x34: case 0x35: case 0x36: case 0x37: 
case 0x38: case 0x39: goto _29;
default: goto _60;
}


    __quex_assert_no_passage();
_96:
    /* (567 from RELOAD_FORWARD)  */
    goto _190;


    __quex_assert_no_passage();
_98:
    /* (568 from RELOAD_FORWARD)  */
_192:
    input = *(me->buffer._read_p);


    __quex_debug_state(568);
if     ( input >= 0x3A )  goto _61;
else if( input >= 0x30 )  goto _29;
else if( input >= 0x1 )   goto _61;
else                      goto _99;


    __quex_assert_no_passage();
_28:
    /* (568 from 567)  */
    ++(me->buffer._read_p);

    goto _192;


    __quex_assert_no_passage();
_29:
    /* (569 from 568) (569 from 569) (569 from 567)  */

    ++(me->buffer._read_p);

_195:
    input = *(me->buffer._read_p);


    __quex_debug_state(569);
if     ( input >= 0x3A )  goto _62;
else if( input >= 0x30 )  goto _29;
else if( input >= 0x1 )   goto _62;
else                      goto _101;


    __quex_assert_no_passage();
_100:
    /* (569 from RELOAD_FORWARD)  */
    goto _195;


    __quex_assert_no_passage();
_30:
    /* (570 from 566)  */
    ++(me->buffer._read_p);

_197:
    input = *(me->buffer._read_p);


    __quex_debug_state(570);
switch( input ) {
case 0x0: goto _103;
case 0x2B: 
case 0x2D: goto _31;
case 0x30: case 0x31: case 0x32: case 0x33: case 0x34: case 0x35: case 0x36: case 0x37: 
case 0x38: case 0x39: goto _32;
default: goto _63;
}


    __quex_assert_no_passage();
_102:
    /* (570 from RELOAD_FORWARD)  */
    goto _197;


    __quex_assert_no_passage();
_31:
    /* (571 from 570)  */
    ++(me->buffer._read_p);

_199:
    input = *(me->buffer._read_p);


    __quex_debug_state(571);
if     ( input >= 0x3A )  goto _64;
else if( input >= 0x30 )  goto _32;
else if( input >= 0x1 )   goto _64;
else                      goto _105;


    __quex_assert_no_passage();
_104:
    /* (571 from RELOAD_FORWARD)  */
    goto _199;


    __quex_assert_no_passage();
_32:
    /* (572 from 572) (572 from 571) (572 from 570)  */

    ++(me->buffer._read_p);

_202:
    input = *(me->buffer._read_p);


    __quex_debug_state(572);
if     ( input >= 0x3A )  goto _59;
else if( input >= 0x30 )  goto _32;
else if( input >= 0x1 )   goto _59;
else                      goto _107;


    __quex_assert_no_passage();
_106:
    /* (572 from RELOAD_FORWARD)  */
    goto _202;


    __quex_assert_no_passage();
_33:
    /* (573 from 556) (573 from 573)  */

    ++(me->buffer._read_p);

_205:
    input = *(me->buffer._read_p);


    __quex_debug_state(573);
switch( input ) {
case 0x0: goto _109;
case 0x30: case 0x31: case 0x32: case 0x33: case 0x34: case 0x35: case 0x36: case 0x37: 
case 0x38: case 0x39: goto _33;
case 0x45: 
case 0x65: goto _34;
default: goto _65;
}


    __quex_assert_no_passage();
_108:
    /* (573 from RELOAD_FORWARD)  */
    goto _205;


    __quex_assert_no_passage();
_110:
    /* (574 from RELOAD_FORWARD)  */
_207:
    input = *(me->buffer._read_p);


    __quex_debug_state(574);
switch( input ) {
case 0x0: goto _111;
case 0x2B: 
case 0x2D: goto _36;
case 0x30: case 0x31: case 0x32: case 0x33: case 0x34: case 0x35: case 0x36: case 0x37: 
case 0x38: case 0x39: goto _35;
default: goto _66;
}


    __quex_assert_no_passage();
_34:
    /* (574 from 573)  */
    ++(me->buffer._read_p);

    goto _207;


    __quex_assert_no_passage();
_35:
    /* (575 from 574) (575 from 575) (575 from 576)  */

    ++(me->buffer._read_p);

_210:
    input = *(me->buffer._read_p);


    __quex_debug_state(575);
if     ( input >= 0x3A )  goto _65;
else if( input >= 0x30 )  goto _35;
else if( input >= 0x1 )   goto _65;
else                      goto _113;


    __quex_assert_no_passage();
_112:
    /* (575 from RELOAD_FORWARD)  */
    goto _210;


    __quex_assert_no_passage();
_114:
    /* (576 from RELOAD_FORWARD)  */
_212:
    input = *(me->buffer._read_p);


    __quex_debug_state(576);
if     ( input >= 0x3A )  goto _67;
else if( input >= 0x30 )  goto _35;
else if( input >= 0x1 )   goto _67;
else                      goto _115;


    __quex_assert_no_passage();
_36:
    /* (576 from 574)  */
    ++(me->buffer._read_p);

    goto _212;


    __quex_assert_no_passage();
_37:
    /* (577 from 553)  */
    ++(me->buffer._read_p);

_214:
    input = *(me->buffer._read_p);


    __quex_debug_state(577);
if( input < 0x2072 ) {
if( input < 0xF8 ) {
switch( input ) {
case 0x0: goto _117;
case 0x41: case 0x42: case 0x43: case 0x44: case 0x45: case 0x46: case 0x47: 
case 0x48: case 0x49: case 0x4A: case 0x4B: case 0x4C: case 0x4D: case 0x4E: case 0x4F: 
case 0x50: case 0x51: case 0x52: case 0x53: case 0x54: case 0x55: case 0x56: case 0x57: 
case 0x58: case 0x59: case 0x5A: 
case 0x61: case 0x62: case 0x63: case 0x64: case 0x65: case 0x66: case 0x67: 
case 0x68: case 0x69: case 0x6A: case 0x6B: case 0x6C: case 0x6D: case 0x6E: case 0x6F: 
case 0x70: case 0x71: case 0x72: goto _8;
case 0x73: goto _38;
case 0x74: case 0x75: case 0x76: case 0x77: case 0x78: case 0x79: case 0x7A: 
case 0xAA: 
case 0xBA: 
case 0xC0: case 0xC1: case 0xC2: case 0xC3: case 0xC4: case 0xC5: case 0xC6: case 0xC7: 
case 0xC8: case 0xC9: case 0xCA: case 0xCB: case 0xCC: case 0xCD: case 0xCE: case 0xCF: 
case 0xD0: case 0xD1: case 0xD2: case 0xD3: case 0xD4: case 0xD5: case 0xD6: 
case 0xD8: case 0xD9: case 0xDA: case 0xDB: case 0xDC: case 0xDD: case 0xDE: case 0xDF: 
case 0xE0: case 0xE1: case 0xE2: case 0xE3: case 0xE4: case 0xE5: case 0xE6: case 0xE7: 
case 0xE8: case 0xE9: case 0xEA: case 0xEB: case 0xEC: case 0xED: case 0xEE: case 0xEF: 
case 0xF0: case 0xF1: case 0xF2: case 0xF3: case 0xF4: case 0xF5: case 0xF6: goto _8;
default: goto _45;
}
} else {
if( input < 0x1D62 ) {
if( input < 0x1D00 ) {
if     ( input < 0x2B9 )  goto _8;
else if( input < 0x2E0 )  goto _45;
else if( input < 0x2E5 )  goto _8;
else                      goto _45;
} else {
if     ( input < 0x1D26 )  goto _8;
else if( input < 0x1D2C )  goto _45;
else if( input < 0x1D5D )  goto _8;
else                       goto _45;
}
} else {
if( input < 0x1D79 ) {
if     ( input < 0x1D66 )  goto _8;
else if( input < 0x1D6B )  goto _45;
else if( input < 0x1D78 )  goto _8;
else                       goto _45;
} else {
if     ( input < 0x1DBF )  goto _8;
else if( input < 0x1E00 )  goto _45;
else if( input < 0x1F00 )  goto _8;
else if( input < 0x2071 )  goto _45;
else                       goto _8;
}
}
}
} else {
if( input < 0xA788 ) {
switch( input ) {
case 0x207F: 
case 0x2090: case 0x2091: case 0x2092: case 0x2093: case 0x2094: case 0x2095: case 0x2096: case 0x2097: 
case 0x2098: case 0x2099: case 0x209A: case 0x209B: case 0x209C: 
case 0x212A: case 0x212B: 
case 0x2132: 
case 0x214E: 
case 0x2160: case 0x2161: case 0x2162: case 0x2163: case 0x2164: case 0x2165: case 0x2166: case 0x2167: 
case 0x2168: case 0x2169: case 0x216A: case 0x216B: case 0x216C: case 0x216D: case 0x216E: case 0x216F: 
case 0x2170: case 0x2171: case 0x2172: case 0x2173: case 0x2174: case 0x2175: case 0x2176: case 0x2177: 
case 0x2178: case 0x2179: case 0x217A: case 0x217B: case 0x217C: case 0x217D: case 0x217E: case 0x217F: 
case 0x2180: case 0x2181: case 0x2182: case 0x2183: case 0x2184: case 0x2185: case 0x2186: case 0x2187: 
case 0x2188: 
case 0x2C60: case 0x2C61: case 0x2C62: case 0x2C63: case 0x2C64: case 0x2C65: case 0x2C66: case 0x2C67: 
case 0x2C68: case 0x2C69: case 0x2C6A: case 0x2C6B: case 0x2C6C: case 0x2C6D: case 0x2C6E: case 0x2C6F: 
case 0x2C70: case 0x2C71: case 0x2C72: case 0x2C73: case 0x2C74: case 0x2C75: case 0x2C76: case 0x2C77: 
case 0x2C78: case 0x2C79: case 0x2C7A: case 0x2C7B: case 0x2C7C: case 0x2C7D: case 0x2C7E: case 0x2C7F: 
case 0xA722: case 0xA723: case 0xA724: case 0xA725: case 0xA726: case 0xA727: 
case 0xA728: case 0xA729: case 0xA72A: case 0xA72B: case 0xA72C: case 0xA72D: case 0xA72E: case 0xA72F: 
case 0xA730: case 0xA731: case 0xA732: case 0xA733: case 0xA734: case 0xA735: case 0xA736: case 0xA737: 
case 0xA738: case 0xA739: case 0xA73A: case 0xA73B: case 0xA73C: case 0xA73D: case 0xA73E: case 0xA73F: 
case 0xA740: case 0xA741: case 0xA742: case 0xA743: case 0xA744: case 0xA745: case 0xA746: case 0xA747: 
case 0xA748: case 0xA749: case 0xA74A: case 0xA74B: case 0xA74C: case 0xA74D: case 0xA74E: case 0xA74F: 
case 0xA750: case 0xA751: case 0xA752: case 0xA753: case 0xA754: case 0xA755: case 0xA756: case 0xA757: 
case 0xA758: case 0xA759: case 0xA75A: case 0xA75B: case 0xA75C: case 0xA75D: case 0xA75E: case 0xA75F: 
case 0xA760: case 0xA761: case 0xA762: case 0xA763: case 0xA764: case 0xA765: case 0xA766: case 0xA767: 
case 0xA768: case 0xA769: case 0xA76A: case 0xA76B: case 0xA76C: case 0xA76D: case 0xA76E: case 0xA76F: 
case 0xA770: case 0xA771: case 0xA772: case 0xA773: case 0xA774: case 0xA775: case 0xA776: case 0xA777: 
case 0xA778: case 0xA779: case 0xA77A: case 0xA77B: case 0xA77C: case 0xA77D: case 0xA77E: case 0xA77F: 
case 0xA780: case 0xA781: case 0xA782: case 0xA783: case 0xA784: case 0xA785: case 0xA786: case 0xA787: goto _8;
default: goto _45;
}
} else {
switch( input ) {
case 0xA78B: case 0xA78C: case 0xA78D: case 0xA78E: case 0xA78F: 
case 0xA790: case 0xA791: case 0xA792: case 0xA793: case 0xA794: case 0xA795: case 0xA796: case 0xA797: 
case 0xA798: case 0xA799: case 0xA79A: case 0xA79B: case 0xA79C: case 0xA79D: case 0xA79E: case 0xA79F: 
case 0xA7A0: case 0xA7A1: case 0xA7A2: case 0xA7A3: case 0xA7A4: case 0xA7A5: case 0xA7A6: case 0xA7A7: 
case 0xA7A8: case 0xA7A9: case 0xA7AA: case 0xA7AB: case 0xA7AC: case 0xA7AD: 
case 0xA7B0: case 0xA7B1: case 0xA7B2: case 0xA7B3: case 0xA7B4: case 0xA7B5: case 0xA7B6: case 0xA7B7: 
case 0xA7F7: 
case 0xA7F8: case 0xA7F9: case 0xA7FA: case 0xA7FB: case 0xA7FC: case 0xA7FD: case 0xA7FE: case 0xA7FF: 
case 0xAB30: case 0xAB31: case 0xAB32: case 0xAB33: case 0xAB34: case 0xAB35: case 0xAB36: case 0xAB37: 
case 0xAB38: case 0xAB39: case 0xAB3A: case 0xAB3B: case 0xAB3C: case 0xAB3D: case 0xAB3E: case 0xAB3F: 
case 0xAB40: case 0xAB41: case 0xAB42: case 0xAB43: case 0xAB44: case 0xAB45: case 0xAB46: case 0xAB47: 
case 0xAB48: case 0xAB49: case 0xAB4A: case 0xAB4B: case 0xAB4C: case 0xAB4D: case 0xAB4E: case 0xAB4F: 
case 0xAB50: case 0xAB51: case 0xAB52: case 0xAB53: case 0xAB54: case 0xAB55: case 0xAB56: case 0xAB57: 
case 0xAB58: case 0xAB59: case 0xAB5A: 
case 0xAB5C: case 0xAB5D: case 0xAB5E: case 0xAB5F: 
case 0xAB60: case 0xAB61: case 0xAB62: case 0xAB63: case 0xAB64: 
case 0xFB00: case 0xFB01: case 0xFB02: case 0xFB03: case 0xFB04: case 0xFB05: case 0xFB06: 
case 0xFF21: case 0xFF22: case 0xFF23: case 0xFF24: case 0xFF25: case 0xFF26: case 0xFF27: 
case 0xFF28: case 0xFF29: case 0xFF2A: case 0xFF2B: case 0xFF2C: case 0xFF2D: case 0xFF2E: case 0xFF2F: 
case 0xFF30: case 0xFF31: case 0xFF32: case 0xFF33: case 0xFF34: case 0xFF35: case 0xFF36: case 0xFF37: 
case 0xFF38: case 0xFF39: case 0xFF3A: 
case 0xFF41: case 0xFF42: case 0xFF43: case 0xFF44: case 0xFF45: case 0xFF46: case 0xFF47: 
case 0xFF48: case 0xFF49: case 0xFF4A: case 0xFF4B: case 0xFF4C: case 0xFF4D: case 0xFF4E: case 0xFF4F: 
case 0xFF50: case 0xFF51: case 0xFF52: case 0xFF53: case 0xFF54: case 0xFF55: case 0xFF56: case 0xFF57: 
case 0xFF58: case 0xFF59: case 0xFF5A: goto _8;
default: goto _45;
}
}
}


    __quex_assert_no_passage();
_116:
    /* (577 from RELOAD_FORWARD)  */
    goto _214;


    __quex_assert_no_passage();
_38:
    /* (578 from 577)  */
    ++(me->buffer._read_p);

_216:
    input = *(me->buffer._read_p);


    __quex_debug_state(578);
if( input < 0x207F ) {
if( input < 0x2E0 ) {
switch( input ) {
case 0x0: goto _119;
case 0x1: case 0x2: case 0x3: case 0x4: case 0x5: case 0x6: case 0x7: 
case 0x8: case 0x9: case 0xA: case 0xB: case 0xC: case 0xD: case 0xE: case 0xF: 
case 0x10: case 0x11: case 0x12: case 0x13: case 0x14: case 0x15: case 0x16: case 0x17: 
case 0x18: case 0x19: case 0x1A: case 0x1B: case 0x1C: case 0x1D: case 0x1E: case 0x1F: 
case 0x20: case 0x21: case 0x22: case 0x23: case 0x24: case 0x25: case 0x26: case 0x27: 
case 0x28: case 0x29: case 0x2A: case 0x2B: case 0x2C: case 0x2D: case 0x2E: case 0x2F: 
case 0x30: case 0x31: case 0x32: case 0x33: case 0x34: case 0x35: case 0x36: case 0x37: 
case 0x38: case 0x39: case 0x3A: case 0x3B: case 0x3C: case 0x3D: case 0x3E: case 0x3F: 
case 0x40: 
case 0x5B: case 0x5C: case 0x5D: case 0x5E: case 0x5F: case 0x60: 
case 0x7B: case 0x7C: case 0x7D: case 0x7E: case 0x7F: 
case 0x80: case 0x81: case 0x82: case 0x83: case 0x84: case 0x85: case 0x86: case 0x87: 
case 0x88: case 0x89: case 0x8A: case 0x8B: case 0x8C: case 0x8D: case 0x8E: case 0x8F: 
case 0x90: case 0x91: case 0x92: case 0x93: case 0x94: case 0x95: case 0x96: case 0x97: 
case 0x98: case 0x99: case 0x9A: case 0x9B: case 0x9C: case 0x9D: case 0x9E: case 0x9F: 
case 0xA0: case 0xA1: case 0xA2: case 0xA3: case 0xA4: case 0xA5: case 0xA6: case 0xA7: 
case 0xA8: case 0xA9: 
case 0xAB: case 0xAC: case 0xAD: case 0xAE: case 0xAF: 
case 0xB0: case 0xB1: case 0xB2: case 0xB3: case 0xB4: case 0xB5: case 0xB6: case 0xB7: 
case 0xB8: case 0xB9: 
case 0xBB: case 0xBC: case 0xBD: case 0xBE: case 0xBF: 
case 0xD7: 
case 0xF7: 
case 0x2B9: case 0x2BA: case 0x2BB: case 0x2BC: case 0x2BD: case 0x2BE: case 0x2BF: 
case 0x2C0: case 0x2C1: case 0x2C2: case 0x2C3: case 0x2C4: case 0x2C5: case 0x2C6: case 0x2C7: 
case 0x2C8: case 0x2C9: case 0x2CA: case 0x2CB: case 0x2CC: case 0x2CD: case 0x2CE: case 0x2CF: 
case 0x2D0: case 0x2D1: case 0x2D2: case 0x2D3: case 0x2D4: case 0x2D5: case 0x2D6: case 0x2D7: 
case 0x2D8: case 0x2D9: case 0x2DA: case 0x2DB: case 0x2DC: case 0x2DD: case 0x2DE: case 0x2DF: goto _68;
default: goto _8;
}
} else {
if( input < 0x1D6B ) {
switch( input ) {
case 0x2E0: case 0x2E1: case 0x2E2: case 0x2E3: case 0x2E4: 
case 0x1D00: case 0x1D01: case 0x1D02: case 0x1D03: case 0x1D04: case 0x1D05: case 0x1D06: case 0x1D07: 
case 0x1D08: case 0x1D09: case 0x1D0A: case 0x1D0B: case 0x1D0C: case 0x1D0D: case 0x1D0E: case 0x1D0F: 
case 0x1D10: case 0x1D11: case 0x1D12: case 0x1D13: case 0x1D14: case 0x1D15: case 0x1D16: case 0x1D17: 
case 0x1D18: case 0x1D19: case 0x1D1A: case 0x1D1B: case 0x1D1C: case 0x1D1D: case 0x1D1E: case 0x1D1F: 
case 0x1D20: case 0x1D21: case 0x1D22: case 0x1D23: case 0x1D24: case 0x1D25: 
case 0x1D2C: case 0x1D2D: case 0x1D2E: case 0x1D2F: 
case 0x1D30: case 0x1D31: case 0x1D32: case 0x1D33: case 0x1D34: case 0x1D35: case 0x1D36: case 0x1D37: 
case 0x1D38: case 0x1D39: case 0x1D3A: case 0x1D3B: case 0x1D3C: case 0x1D3D: case 0x1D3E: case 0x1D3F: 
case 0x1D40: case 0x1D41: case 0x1D42: case 0x1D43: case 0x1D44: case 0x1D45: case 0x1D46: case 0x1D47: 
case 0x1D48: case 0x1D49: case 0x1D4A: case 0x1D4B: case 0x1D4C: case 0x1D4D: case 0x1D4E: case 0x1D4F: 
case 0x1D50: case 0x1D51: case 0x1D52: case 0x1D53: case 0x1D54: case 0x1D55: case 0x1D56: case 0x1D57: 
case 0x1D58: case 0x1D59: case 0x1D5A: case 0x1D5B: case 0x1D5C: 
case 0x1D62: case 0x1D63: case 0x1D64: case 0x1D65: goto _8;
default: goto _68;
}
} else {
if( input < 0x1E00 ) {
if     ( input < 0x1D78 )   goto _8;
else if( input == 0x1D78 )  goto _68;
else if( input < 0x1DBF )   goto _8;
else                        goto _68;
} else {
if     ( input < 0x1F00 )   goto _8;
else if( input < 0x2071 )   goto _68;
else if( input == 0x2071 )  goto _8;
else                        goto _68;
}
}
}
} else {
if( input < 0xA78B ) {
switch( input ) {
case 0x207F: 
case 0x2090: case 0x2091: case 0x2092: case 0x2093: case 0x2094: case 0x2095: case 0x2096: case 0x2097: 
case 0x2098: case 0x2099: case 0x209A: case 0x209B: case 0x209C: 
case 0x212A: case 0x212B: 
case 0x2132: 
case 0x214E: 
case 0x2160: case 0x2161: case 0x2162: case 0x2163: case 0x2164: case 0x2165: case 0x2166: case 0x2167: 
case 0x2168: case 0x2169: case 0x216A: case 0x216B: case 0x216C: case 0x216D: case 0x216E: case 0x216F: 
case 0x2170: case 0x2171: case 0x2172: case 0x2173: case 0x2174: case 0x2175: case 0x2176: case 0x2177: 
case 0x2178: case 0x2179: case 0x217A: case 0x217B: case 0x217C: case 0x217D: case 0x217E: case 0x217F: 
case 0x2180: case 0x2181: case 0x2182: case 0x2183: case 0x2184: case 0x2185: case 0x2186: case 0x2187: 
case 0x2188: 
case 0x2C60: case 0x2C61: case 0x2C62: case 0x2C63: case 0x2C64: case 0x2C65: case 0x2C66: case 0x2C67: 
case 0x2C68: case 0x2C69: case 0x2C6A: case 0x2C6B: case 0x2C6C: case 0x2C6D: case 0x2C6E: case 0x2C6F: 
case 0x2C70: case 0x2C71: case 0x2C72: case 0x2C73: case 0x2C74: case 0x2C75: case 0x2C76: case 0x2C77: 
case 0x2C78: case 0x2C79: case 0x2C7A: case 0x2C7B: case 0x2C7C: case 0x2C7D: case 0x2C7E: case 0x2C7F: 
case 0xA722: case 0xA723: case 0xA724: case 0xA725: case 0xA726: case 0xA727: 
case 0xA728: case 0xA729: case 0xA72A: case 0xA72B: case 0xA72C: case 0xA72D: case 0xA72E: case 0xA72F: 
case 0xA730: case 0xA731: case 0xA732: case 0xA733: case 0xA734: case 0xA735: case 0xA736: case 0xA737: 
case 0xA738: case 0xA739: case 0xA73A: case 0xA73B: case 0xA73C: case 0xA73D: case 0xA73E: case 0xA73F: 
case 0xA740: case 0xA741: case 0xA742: case 0xA743: case 0xA744: case 0xA745: case 0xA746: case 0xA747: 
case 0xA748: case 0xA749: case 0xA74A: case 0xA74B: case 0xA74C: case 0xA74D: case 0xA74E: case 0xA74F: 
case 0xA750: case 0xA751: case 0xA752: case 0xA753: case 0xA754: case 0xA755: case 0xA756: case 0xA757: 
case 0xA758: case 0xA759: case 0xA75A: case 0xA75B: case 0xA75C: case 0xA75D: case 0xA75E: case 0xA75F: 
case 0xA760: case 0xA761: case 0xA762: case 0xA763: case 0xA764: case 0xA765: case 0xA766: case 0xA767: 
case 0xA768: case 0xA769: case 0xA76A: case 0xA76B: case 0xA76C: case 0xA76D: case 0xA76E: case 0xA76F: 
case 0xA770: case 0xA771: case 0xA772: case 0xA773: case 0xA774: case 0xA775: case 0xA776: case 0xA777: 
case 0xA778: case 0xA779: case 0xA77A: case 0xA77B: case 0xA77C: case 0xA77D: case 0xA77E: case 0xA77F: 
case 0xA780: case 0xA781: case 0xA782: case 0xA783: case 0xA784: case 0xA785: case 0xA786: case 0xA787: goto _8;
default: goto _68;
}
} else {
switch( input ) {
case 0xA78B: case 0xA78C: case 0xA78D: case 0xA78E: case 0xA78F: 
case 0xA790: case 0xA791: case 0xA792: case 0xA793: case 0xA794: case 0xA795: case 0xA796: case 0xA797: 
case 0xA798: case 0xA799: case 0xA79A: case 0xA79B: case 0xA79C: case 0xA79D: case 0xA79E: case 0xA79F: 
case 0xA7A0: case 0xA7A1: case 0xA7A2: case 0xA7A3: case 0xA7A4: case 0xA7A5: case 0xA7A6: case 0xA7A7: 
case 0xA7A8: case 0xA7A9: case 0xA7AA: case 0xA7AB: case 0xA7AC: case 0xA7AD: 
case 0xA7B0: case 0xA7B1: case 0xA7B2: case 0xA7B3: case 0xA7B4: case 0xA7B5: case 0xA7B6: case 0xA7B7: 
case 0xA7F7: 
case 0xA7F8: case 0xA7F9: case 0xA7FA: case 0xA7FB: case 0xA7FC: case 0xA7FD: case 0xA7FE: case 0xA7FF: 
case 0xAB30: case 0xAB31: case 0xAB32: case 0xAB33: case 0xAB34: case 0xAB35: case 0xAB36: case 0xAB37: 
case 0xAB38: case 0xAB39: case 0xAB3A: case 0xAB3B: case 0xAB3C: case 0xAB3D: case 0xAB3E: case 0xAB3F: 
case 0xAB40: case 0xAB41: case 0xAB42: case 0xAB43: case 0xAB44: case 0xAB45: case 0xAB46: case 0xAB47: 
case 0xAB48: case 0xAB49: case 0xAB4A: case 0xAB4B: case 0xAB4C: case 0xAB4D: case 0xAB4E: case 0xAB4F: 
case 0xAB50: case 0xAB51: case 0xAB52: case 0xAB53: case 0xAB54: case 0xAB55: case 0xAB56: case 0xAB57: 
case 0xAB58: case 0xAB59: case 0xAB5A: 
case 0xAB5C: case 0xAB5D: case 0xAB5E: case 0xAB5F: 
case 0xAB60: case 0xAB61: case 0xAB62: case 0xAB63: case 0xAB64: 
case 0xFB00: case 0xFB01: case 0xFB02: case 0xFB03: case 0xFB04: case 0xFB05: case 0xFB06: 
case 0xFF21: case 0xFF22: case 0xFF23: case 0xFF24: case 0xFF25: case 0xFF26: case 0xFF27: 
case 0xFF28: case 0xFF29: case 0xFF2A: case 0xFF2B: case 0xFF2C: case 0xFF2D: case 0xFF2E: case 0xFF2F: 
case 0xFF30: case 0xFF31: case 0xFF32: case 0xFF33: case 0xFF34: case 0xFF35: case 0xFF36: case 0xFF37: 
case 0xFF38: case 0xFF39: case 0xFF3A: 
case 0xFF41: case 0xFF42: case 0xFF43: case 0xFF44: case 0xFF45: case 0xFF46: case 0xFF47: 
case 0xFF48: case 0xFF49: case 0xFF4A: case 0xFF4B: case 0xFF4C: case 0xFF4D: case 0xFF4E: case 0xFF4F: 
case 0xFF50: case 0xFF51: case 0xFF52: case 0xFF53: case 0xFF54: case 0xFF55: case 0xFF56: case 0xFF57: 
case 0xFF58: case 0xFF59: case 0xFF5A: goto _8;
default: goto _68;
}
}
}


    __quex_assert_no_passage();
_118:
    /* (578 from RELOAD_FORWARD)  */
    goto _216;


    __quex_assert_no_passage();
_39:
    /* (579 from 549)  */
    ++(me->buffer._read_p);

_218:
    input = *(me->buffer._read_p);


    __quex_debug_state(579);
if( input < 0x2072 ) {
if( input < 0xF8 ) {
switch( input ) {
case 0x0: goto _121;
case 0x41: case 0x42: case 0x43: case 0x44: case 0x45: case 0x46: case 0x47: 
case 0x48: case 0x49: case 0x4A: case 0x4B: case 0x4C: case 0x4D: case 0x4E: case 0x4F: 
case 0x50: case 0x51: case 0x52: case 0x53: case 0x54: case 0x55: case 0x56: case 0x57: 
case 0x58: case 0x59: case 0x5A: 
case 0x61: case 0x62: case 0x63: case 0x64: case 0x65: case 0x66: case 0x67: 
case 0x68: case 0x69: case 0x6A: case 0x6B: case 0x6C: case 0x6D: goto _8;
case 0x6E: goto _40;
case 0x6F: 
case 0x70: case 0x71: case 0x72: case 0x73: case 0x74: case 0x75: case 0x76: case 0x77: 
case 0x78: case 0x79: case 0x7A: 
case 0xAA: 
case 0xBA: 
case 0xC0: case 0xC1: case 0xC2: case 0xC3: case 0xC4: case 0xC5: case 0xC6: case 0xC7: 
case 0xC8: case 0xC9: case 0xCA: case 0xCB: case 0xCC: case 0xCD: case 0xCE: case 0xCF: 
case 0xD0: case 0xD1: case 0xD2: case 0xD3: case 0xD4: case 0xD5: case 0xD6: 
case 0xD8: case 0xD9: case 0xDA: case 0xDB: case 0xDC: case 0xDD: case 0xDE: case 0xDF: 
case 0xE0: case 0xE1: case 0xE2: case 0xE3: case 0xE4: case 0xE5: case 0xE6: case 0xE7: 
case 0xE8: case 0xE9: case 0xEA: case 0xEB: case 0xEC: case 0xED: case 0xEE: case 0xEF: 
case 0xF0: case 0xF1: case 0xF2: case 0xF3: case 0xF4: case 0xF5: case 0xF6: goto _8;
default: goto _45;
}
} else {
if( input < 0x1D62 ) {
if( input < 0x1D00 ) {
if     ( input < 0x2B9 )  goto _8;
else if( input < 0x2E0 )  goto _45;
else if( input < 0x2E5 )  goto _8;
else                      goto _45;
} else {
if     ( input < 0x1D26 )  goto _8;
else if( input < 0x1D2C )  goto _45;
else if( input < 0x1D5D )  goto _8;
else                       goto _45;
}
} else {
if( input < 0x1D79 ) {
if     ( input < 0x1D66 )  goto _8;
else if( input < 0x1D6B )  goto _45;
else if( input < 0x1D78 )  goto _8;
else                       goto _45;
} else {
if     ( input < 0x1DBF )  goto _8;
else if( input < 0x1E00 )  goto _45;
else if( input < 0x1F00 )  goto _8;
else if( input < 0x2071 )  goto _45;
else                       goto _8;
}
}
}
} else {
if( input < 0xA788 ) {
switch( input ) {
case 0x207F: 
case 0x2090: case 0x2091: case 0x2092: case 0x2093: case 0x2094: case 0x2095: case 0x2096: case 0x2097: 
case 0x2098: case 0x2099: case 0x209A: case 0x209B: case 0x209C: 
case 0x212A: case 0x212B: 
case 0x2132: 
case 0x214E: 
case 0x2160: case 0x2161: case 0x2162: case 0x2163: case 0x2164: case 0x2165: case 0x2166: case 0x2167: 
case 0x2168: case 0x2169: case 0x216A: case 0x216B: case 0x216C: case 0x216D: case 0x216E: case 0x216F: 
case 0x2170: case 0x2171: case 0x2172: case 0x2173: case 0x2174: case 0x2175: case 0x2176: case 0x2177: 
case 0x2178: case 0x2179: case 0x217A: case 0x217B: case 0x217C: case 0x217D: case 0x217E: case 0x217F: 
case 0x2180: case 0x2181: case 0x2182: case 0x2183: case 0x2184: case 0x2185: case 0x2186: case 0x2187: 
case 0x2188: 
case 0x2C60: case 0x2C61: case 0x2C62: case 0x2C63: case 0x2C64: case 0x2C65: case 0x2C66: case 0x2C67: 
case 0x2C68: case 0x2C69: case 0x2C6A: case 0x2C6B: case 0x2C6C: case 0x2C6D: case 0x2C6E: case 0x2C6F: 
case 0x2C70: case 0x2C71: case 0x2C72: case 0x2C73: case 0x2C74: case 0x2C75: case 0x2C76: case 0x2C77: 
case 0x2C78: case 0x2C79: case 0x2C7A: case 0x2C7B: case 0x2C7C: case 0x2C7D: case 0x2C7E: case 0x2C7F: 
case 0xA722: case 0xA723: case 0xA724: case 0xA725: case 0xA726: case 0xA727: 
case 0xA728: case 0xA729: case 0xA72A: case 0xA72B: case 0xA72C: case 0xA72D: case 0xA72E: case 0xA72F: 
case 0xA730: case 0xA731: case 0xA732: case 0xA733: case 0xA734: case 0xA735: case 0xA736: case 0xA737: 
case 0xA738: case 0xA739: case 0xA73A: case 0xA73B: case 0xA73C: case 0xA73D: case 0xA73E: case 0xA73F: 
case 0xA740: case 0xA741: case 0xA742: case 0xA743: case 0xA744: case 0xA745: case 0xA746: case 0xA747: 
case 0xA748: case 0xA749: case 0xA74A: case 0xA74B: case 0xA74C: case 0xA74D: case 0xA74E: case 0xA74F: 
case 0xA750: case 0xA751: case 0xA752: case 0xA753: case 0xA754: case 0xA755: case 0xA756: case 0xA757: 
case 0xA758: case 0xA759: case 0xA75A: case 0xA75B: case 0xA75C: case 0xA75D: case 0xA75E: case 0xA75F: 
case 0xA760: case 0xA761: case 0xA762: case 0xA763: case 0xA764: case 0xA765: case 0xA766: case 0xA767: 
case 0xA768: case 0xA769: case 0xA76A: case 0xA76B: case 0xA76C: case 0xA76D: case 0xA76E: case 0xA76F: 
case 0xA770: case 0xA771: case 0xA772: case 0xA773: case 0xA774: case 0xA775: case 0xA776: case 0xA777: 
case 0xA778: case 0xA779: case 0xA77A: case 0xA77B: case 0xA77C: case 0xA77D: case 0xA77E: case 0xA77F: 
case 0xA780: case 0xA781: case 0xA782: case 0xA783: case 0xA784: case 0xA785: case 0xA786: case 0xA787: goto _8;
default: goto _45;
}
} else {
switch( input ) {
case 0xA78B: case 0xA78C: case 0xA78D: case 0xA78E: case 0xA78F: 
case 0xA790: case 0xA791: case 0xA792: case 0xA793: case 0xA794: case 0xA795: case 0xA796: case 0xA797: 
case 0xA798: case 0xA799: case 0xA79A: case 0xA79B: case 0xA79C: case 0xA79D: case 0xA79E: case 0xA79F: 
case 0xA7A0: case 0xA7A1: case 0xA7A2: case 0xA7A3: case 0xA7A4: case 0xA7A5: case 0xA7A6: case 0xA7A7: 
case 0xA7A8: case 0xA7A9: case 0xA7AA: case 0xA7AB: case 0xA7AC: case 0xA7AD: 
case 0xA7B0: case 0xA7B1: case 0xA7B2: case 0xA7B3: case 0xA7B4: case 0xA7B5: case 0xA7B6: case 0xA7B7: 
case 0xA7F7: 
case 0xA7F8: case 0xA7F9: case 0xA7FA: case 0xA7FB: case 0xA7FC: case 0xA7FD: case 0xA7FE: case 0xA7FF: 
case 0xAB30: case 0xAB31: case 0xAB32: case 0xAB33: case 0xAB34: case 0xAB35: case 0xAB36: case 0xAB37: 
case 0xAB38: case 0xAB39: case 0xAB3A: case 0xAB3B: case 0xAB3C: case 0xAB3D: case 0xAB3E: case 0xAB3F: 
case 0xAB40: case 0xAB41: case 0xAB42: case 0xAB43: case 0xAB44: case 0xAB45: case 0xAB46: case 0xAB47: 
case 0xAB48: case 0xAB49: case 0xAB4A: case 0xAB4B: case 0xAB4C: case 0xAB4D: case 0xAB4E: case 0xAB4F: 
case 0xAB50: case 0xAB51: case 0xAB52: case 0xAB53: case 0xAB54: case 0xAB55: case 0xAB56: case 0xAB57: 
case 0xAB58: case 0xAB59: case 0xAB5A: 
case 0xAB5C: case 0xAB5D: case 0xAB5E: case 0xAB5F: 
case 0xAB60: case 0xAB61: case 0xAB62: case 0xAB63: case 0xAB64: 
case 0xFB00: case 0xFB01: case 0xFB02: case 0xFB03: case 0xFB04: case 0xFB05: case 0xFB06: 
case 0xFF21: case 0xFF22: case 0xFF23: case 0xFF24: case 0xFF25: case 0xFF26: case 0xFF27: 
case 0xFF28: case 0xFF29: case 0xFF2A: case 0xFF2B: case 0xFF2C: case 0xFF2D: case 0xFF2E: case 0xFF2F: 
case 0xFF30: case 0xFF31: case 0xFF32: case 0xFF33: case 0xFF34: case 0xFF35: case 0xFF36: case 0xFF37: 
case 0xFF38: case 0xFF39: case 0xFF3A: 
case 0xFF41: case 0xFF42: case 0xFF43: case 0xFF44: case 0xFF45: case 0xFF46: case 0xFF47: 
case 0xFF48: case 0xFF49: case 0xFF4A: case 0xFF4B: case 0xFF4C: case 0xFF4D: case 0xFF4E: case 0xFF4F: 
case 0xFF50: case 0xFF51: case 0xFF52: case 0xFF53: case 0xFF54: case 0xFF55: case 0xFF56: case 0xFF57: 
case 0xFF58: case 0xFF59: case 0xFF5A: goto _8;
default: goto _45;
}
}
}


    __quex_assert_no_passage();
_120:
    /* (579 from RELOAD_FORWARD)  */
    goto _218;


    __quex_assert_no_passage();
_122:
    /* (580 from RELOAD_FORWARD)  */
_220:
    input = *(me->buffer._read_p);


    __quex_debug_state(580);
if( input < 0x207F ) {
if( input < 0x2E0 ) {
switch( input ) {
case 0x0: goto _123;
case 0x1: case 0x2: case 0x3: case 0x4: case 0x5: case 0x6: case 0x7: 
case 0x8: case 0x9: case 0xA: case 0xB: case 0xC: case 0xD: case 0xE: case 0xF: 
case 0x10: case 0x11: case 0x12: case 0x13: case 0x14: case 0x15: case 0x16: case 0x17: 
case 0x18: case 0x19: case 0x1A: case 0x1B: case 0x1C: case 0x1D: case 0x1E: case 0x1F: 
case 0x20: case 0x21: case 0x22: case 0x23: case 0x24: case 0x25: case 0x26: case 0x27: 
case 0x28: case 0x29: case 0x2A: case 0x2B: case 0x2C: case 0x2D: case 0x2E: case 0x2F: 
case 0x30: case 0x31: case 0x32: case 0x33: case 0x34: case 0x35: case 0x36: case 0x37: 
case 0x38: case 0x39: case 0x3A: case 0x3B: case 0x3C: case 0x3D: case 0x3E: case 0x3F: 
case 0x40: 
case 0x5B: case 0x5C: case 0x5D: case 0x5E: case 0x5F: case 0x60: 
case 0x7B: case 0x7C: case 0x7D: case 0x7E: case 0x7F: 
case 0x80: case 0x81: case 0x82: case 0x83: case 0x84: case 0x85: case 0x86: case 0x87: 
case 0x88: case 0x89: case 0x8A: case 0x8B: case 0x8C: case 0x8D: case 0x8E: case 0x8F: 
case 0x90: case 0x91: case 0x92: case 0x93: case 0x94: case 0x95: case 0x96: case 0x97: 
case 0x98: case 0x99: case 0x9A: case 0x9B: case 0x9C: case 0x9D: case 0x9E: case 0x9F: 
case 0xA0: case 0xA1: case 0xA2: case 0xA3: case 0xA4: case 0xA5: case 0xA6: case 0xA7: 
case 0xA8: case 0xA9: 
case 0xAB: case 0xAC: case 0xAD: case 0xAE: case 0xAF: 
case 0xB0: case 0xB1: case 0xB2: case 0xB3: case 0xB4: case 0xB5: case 0xB6: case 0xB7: 
case 0xB8: case 0xB9: 
case 0xBB: case 0xBC: case 0xBD: case 0xBE: case 0xBF: 
case 0xD7: 
case 0xF7: 
case 0x2B9: case 0x2BA: case 0x2BB: case 0x2BC: case 0x2BD: case 0x2BE: case 0x2BF: 
case 0x2C0: case 0x2C1: case 0x2C2: case 0x2C3: case 0x2C4: case 0x2C5: case 0x2C6: case 0x2C7: 
case 0x2C8: case 0x2C9: case 0x2CA: case 0x2CB: case 0x2CC: case 0x2CD: case 0x2CE: case 0x2CF: 
case 0x2D0: case 0x2D1: case 0x2D2: case 0x2D3: case 0x2D4: case 0x2D5: case 0x2D6: case 0x2D7: 
case 0x2D8: case 0x2D9: case 0x2DA: case 0x2DB: case 0x2DC: case 0x2DD: case 0x2DE: case 0x2DF: goto _69;
default: goto _8;
}
} else {
if( input < 0x1D6B ) {
switch( input ) {
case 0x2E0: case 0x2E1: case 0x2E2: case 0x2E3: case 0x2E4: 
case 0x1D00: case 0x1D01: case 0x1D02: case 0x1D03: case 0x1D04: case 0x1D05: case 0x1D06: case 0x1D07: 
case 0x1D08: case 0x1D09: case 0x1D0A: case 0x1D0B: case 0x1D0C: case 0x1D0D: case 0x1D0E: case 0x1D0F: 
case 0x1D10: case 0x1D11: case 0x1D12: case 0x1D13: case 0x1D14: case 0x1D15: case 0x1D16: case 0x1D17: 
case 0x1D18: case 0x1D19: case 0x1D1A: case 0x1D1B: case 0x1D1C: case 0x1D1D: case 0x1D1E: case 0x1D1F: 
case 0x1D20: case 0x1D21: case 0x1D22: case 0x1D23: case 0x1D24: case 0x1D25: 
case 0x1D2C: case 0x1D2D: case 0x1D2E: case 0x1D2F: 
case 0x1D30: case 0x1D31: case 0x1D32: case 0x1D33: case 0x1D34: case 0x1D35: case 0x1D36: case 0x1D37: 
case 0x1D38: case 0x1D39: case 0x1D3A: case 0x1D3B: case 0x1D3C: case 0x1D3D: case 0x1D3E: case 0x1D3F: 
case 0x1D40: case 0x1D41: case 0x1D42: case 0x1D43: case 0x1D44: case 0x1D45: case 0x1D46: case 0x1D47: 
case 0x1D48: case 0x1D49: case 0x1D4A: case 0x1D4B: case 0x1D4C: case 0x1D4D: case 0x1D4E: case 0x1D4F: 
case 0x1D50: case 0x1D51: case 0x1D52: case 0x1D53: case 0x1D54: case 0x1D55: case 0x1D56: case 0x1D57: 
case 0x1D58: case 0x1D59: case 0x1D5A: case 0x1D5B: case 0x1D5C: 
case 0x1D62: case 0x1D63: case 0x1D64: case 0x1D65: goto _8;
default: goto _69;
}
} else {
if( input < 0x1E00 ) {
if     ( input < 0x1D78 )   goto _8;
else if( input == 0x1D78 )  goto _69;
else if( input < 0x1DBF )   goto _8;
else                        goto _69;
} else {
if     ( input < 0x1F00 )   goto _8;
else if( input < 0x2071 )   goto _69;
else if( input == 0x2071 )  goto _8;
else                        goto _69;
}
}
}
} else {
if( input < 0xA78B ) {
switch( input ) {
case 0x207F: 
case 0x2090: case 0x2091: case 0x2092: case 0x2093: case 0x2094: case 0x2095: case 0x2096: case 0x2097: 
case 0x2098: case 0x2099: case 0x209A: case 0x209B: case 0x209C: 
case 0x212A: case 0x212B: 
case 0x2132: 
case 0x214E: 
case 0x2160: case 0x2161: case 0x2162: case 0x2163: case 0x2164: case 0x2165: case 0x2166: case 0x2167: 
case 0x2168: case 0x2169: case 0x216A: case 0x216B: case 0x216C: case 0x216D: case 0x216E: case 0x216F: 
case 0x2170: case 0x2171: case 0x2172: case 0x2173: case 0x2174: case 0x2175: case 0x2176: case 0x2177: 
case 0x2178: case 0x2179: case 0x217A: case 0x217B: case 0x217C: case 0x217D: case 0x217E: case 0x217F: 
case 0x2180: case 0x2181: case 0x2182: case 0x2183: case 0x2184: case 0x2185: case 0x2186: case 0x2187: 
case 0x2188: 
case 0x2C60: case 0x2C61: case 0x2C62: case 0x2C63: case 0x2C64: case 0x2C65: case 0x2C66: case 0x2C67: 
case 0x2C68: case 0x2C69: case 0x2C6A: case 0x2C6B: case 0x2C6C: case 0x2C6D: case 0x2C6E: case 0x2C6F: 
case 0x2C70: case 0x2C71: case 0x2C72: case 0x2C73: case 0x2C74: case 0x2C75: case 0x2C76: case 0x2C77: 
case 0x2C78: case 0x2C79: case 0x2C7A: case 0x2C7B: case 0x2C7C: case 0x2C7D: case 0x2C7E: case 0x2C7F: 
case 0xA722: case 0xA723: case 0xA724: case 0xA725: case 0xA726: case 0xA727: 
case 0xA728: case 0xA729: case 0xA72A: case 0xA72B: case 0xA72C: case 0xA72D: case 0xA72E: case 0xA72F: 
case 0xA730: case 0xA731: case 0xA732: case 0xA733: case 0xA734: case 0xA735: case 0xA736: case 0xA737: 
case 0xA738: case 0xA739: case 0xA73A: case 0xA73B: case 0xA73C: case 0xA73D: case 0xA73E: case 0xA73F: 
case 0xA740: case 0xA741: case 0xA742: case 0xA743: case 0xA744: case 0xA745: case 0xA746: case 0xA747: 
case 0xA748: case 0xA749: case 0xA74A: case 0xA74B: case 0xA74C: case 0xA74D: case 0xA74E: case 0xA74F: 
case 0xA750: case 0xA751: case 0xA752: case 0xA753: case 0xA754: case 0xA755: case 0xA756: case 0xA757: 
case 0xA758: case 0xA759: case 0xA75A: case 0xA75B: case 0xA75C: case 0xA75D: case 0xA75E: case 0xA75F: 
case 0xA760: case 0xA761: case 0xA762: case 0xA763: case 0xA764: case 0xA765: case 0xA766: case 0xA767: 
case 0xA768: case 0xA769: case 0xA76A: case 0xA76B: case 0xA76C: case 0xA76D: case 0xA76E: case 0xA76F: 
case 0xA770: case 0xA771: case 0xA772: case 0xA773: case 0xA774: case 0xA775: case 0xA776: case 0xA777: 
case 0xA778: case 0xA779: case 0xA77A: case 0xA77B: case 0xA77C: case 0xA77D: case 0xA77E: case 0xA77F: 
case 0xA780: case 0xA781: case 0xA782: case 0xA783: case 0xA784: case 0xA785: case 0xA786: case 0xA787: goto _8;
default: goto _69;
}
} else {
switch( input ) {
case 0xA78B: case 0xA78C: case 0xA78D: case 0xA78E: case 0xA78F: 
case 0xA790: case 0xA791: case 0xA792: case 0xA793: case 0xA794: case 0xA795: case 0xA796: case 0xA797: 
case 0xA798: case 0xA799: case 0xA79A: case 0xA79B: case 0xA79C: case 0xA79D: case 0xA79E: case 0xA79F: 
case 0xA7A0: case 0xA7A1: case 0xA7A2: case 0xA7A3: case 0xA7A4: case 0xA7A5: case 0xA7A6: case 0xA7A7: 
case 0xA7A8: case 0xA7A9: case 0xA7AA: case 0xA7AB: case 0xA7AC: case 0xA7AD: 
case 0xA7B0: case 0xA7B1: case 0xA7B2: case 0xA7B3: case 0xA7B4: case 0xA7B5: case 0xA7B6: case 0xA7B7: 
case 0xA7F7: 
case 0xA7F8: case 0xA7F9: case 0xA7FA: case 0xA7FB: case 0xA7FC: case 0xA7FD: case 0xA7FE: case 0xA7FF: 
case 0xAB30: case 0xAB31: case 0xAB32: case 0xAB33: case 0xAB34: case 0xAB35: case 0xAB36: case 0xAB37: 
case 0xAB38: case 0xAB39: case 0xAB3A: case 0xAB3B: case 0xAB3C: case 0xAB3D: case 0xAB3E: case 0xAB3F: 
case 0xAB40: case 0xAB41: case 0xAB42: case 0xAB43: case 0xAB44: case 0xAB45: case 0xAB46: case 0xAB47: 
case 0xAB48: case 0xAB49: case 0xAB4A: case 0xAB4B: case 0xAB4C: case 0xAB4D: case 0xAB4E: case 0xAB4F: 
case 0xAB50: case 0xAB51: case 0xAB52: case 0xAB53: case 0xAB54: case 0xAB55: case 0xAB56: case 0xAB57: 
case 0xAB58: case 0xAB59: case 0xAB5A: 
case 0xAB5C: case 0xAB5D: case 0xAB5E: case 0xAB5F: 
case 0xAB60: case 0xAB61: case 0xAB62: case 0xAB63: case 0xAB64: 
case 0xFB00: case 0xFB01: case 0xFB02: case 0xFB03: case 0xFB04: case 0xFB05: case 0xFB06: 
case 0xFF21: case 0xFF22: case 0xFF23: case 0xFF24: case 0xFF25: case 0xFF26: case 0xFF27: 
case 0xFF28: case 0xFF29: case 0xFF2A: case 0xFF2B: case 0xFF2C: case 0xFF2D: case 0xFF2E: case 0xFF2F: 
case 0xFF30: case 0xFF31: case 0xFF32: case 0xFF33: case 0xFF34: case 0xFF35: case 0xFF36: case 0xFF37: 
case 0xFF38: case 0xFF39: case 0xFF3A: 
case 0xFF41: case 0xFF42: case 0xFF43: case 0xFF44: case 0xFF45: case 0xFF46: case 0xFF47: 
case 0xFF48: case 0xFF49: case 0xFF4A: case 0xFF4B: case 0xFF4C: case 0xFF4D: case 0xFF4E: case 0xFF4F: 
case 0xFF50: case 0xFF51: case 0xFF52: case 0xFF53: case 0xFF54: case 0xFF55: case 0xFF56: case 0xFF57: 
case 0xFF58: case 0xFF59: case 0xFF5A: goto _8;
default: goto _69;
}
}
}


    __quex_assert_no_passage();
_40:
    /* (580 from 579)  */
    ++(me->buffer._read_p);

    goto _220;

    /* (*) Terminal states _______________________________________________________
     *
     * States that implement actions of the 'winner patterns.                     */
_221:
    __quex_debug("* TERMINAL BAD_LEXATOM\n");
__QUEX_COUNT_VOID(&self, LexemeBegin, LexemeEnd);
{
QUEX_ERROR_EXIT("Mode 'MAIN': bad lexatom (character encoding error) detected!\n"                "No 'on_bad_lexatom' handler has been specified.\n");
}
    /* Bad lexatom detection FORCES a return from the lexical analyzer, so that no
     * tokens can be filled after the termination token.
     */
goto _3;
_70:
    __quex_debug("* TERMINAL END_OF_STREAM\n");
__QUEX_COUNT_VOID(&self, LexemeBegin, LexemeEnd);
{

#   line 25 "lexer.quex"
 self_send(token::KW_TERMINATION); return;

#   line 3088 "DerivLexer.cpp"

}
    /* End of Stream FORCES a return from the lexical analyzer, so that no
     * tokens can be filled after the termination token.
     */
goto _3;
_143:
    __quex_debug("* TERMINAL FAILURE\n");
__QUEX_COUNT_VOID(&self, LexemeBegin, LexemeEnd);
QUEX_LEXEME_TERMINATING_ZERO_SET(&me->buffer);
{

#   line 26 "lexer.quex"
 self_send1(token::KW_LEXER_ERROR, Lexeme); return;

#   line 3104 "DerivLexer.cpp"

}
goto _2;
_0:
    __quex_debug("* TERMINAL character set skipper\n");

    /* (647 from BEFORE_ENTRY)  */
    character_begin_p = (me->buffer._read_p);

_240:
    input = *(me->buffer._read_p);

__QUEX_IF_COUNT_COLUMNS(reference_p = character_begin_p);

_239:
    __quex_debug("Init State\n");
    __quex_debug_state(647);
if( input < 0x20 ) {
switch( input ) {
case 0x0: goto _235;
case 0x9: goto _224;
case 0xA: goto _227;
default: goto _226;
}
} else {
if( input < 0xD800 ) {
if( input == 0x20 )  goto _225;
else                 goto _226;
} else {
if     ( input < 0xDC00 )  goto _228;
else if( input < 0xE000 )  goto _223;
else                       goto _226;
}
}


    __quex_assert_no_passage();
_234:
    /* (647 from RELOAD_FORWARD)  */
    character_begin_p = (me->buffer._lexeme_start_p);

    goto _240;


    __quex_assert_no_passage();
_238:
    /* (647 from 654)  */
    character_begin_p = (me->buffer._read_p);

    goto _239;


    __quex_assert_no_passage();
_231:
    /* (DROP_OUT from 650)  */
    goto _242;

    __quex_debug("Drop-Out Catcher\n");


    __quex_assert_no_passage();
_233:
    /* (DROP_OUT from 652)  */
    goto _243;


    __quex_assert_no_passage();
_230:
    /* (DROP_OUT from 649)  */
    goto _244;


    __quex_assert_no_passage();
_232:
    /* (DROP_OUT from 651)  */
    goto _245;


    __quex_assert_no_passage();
_229:
    /* (DROP_OUT from 648)  */
    goto _221;


    __quex_assert_no_passage();
_223:
    /* (648 from 647) (648 from 653)  */

    ++(me->buffer._read_p);

    input = *(me->buffer._read_p);


    __quex_debug_state(648);
goto _229;


    __quex_assert_no_passage();
_224:
    /* (649 from 647)  */
    ++(me->buffer._read_p);

    input = *(me->buffer._read_p);


    __quex_debug_state(649);
goto _230;


    __quex_assert_no_passage();
_225:
    /* (650 from 647)  */
    ++(me->buffer._read_p);

    input = *(me->buffer._read_p);


    __quex_debug_state(650);
goto _231;


    __quex_assert_no_passage();
_226:
    /* (651 from 647) (651 from 653)  */

    ++(me->buffer._read_p);

    input = *(me->buffer._read_p);


    __quex_debug_state(651);
goto _232;


    __quex_assert_no_passage();
_227:
    /* (652 from 647)  */
    ++(me->buffer._read_p);

    input = *(me->buffer._read_p);


    __quex_debug_state(652);
goto _233;


    __quex_assert_no_passage();
_236:
    /* (653 from RELOAD_FORWARD)  */
    character_begin_p = (me->buffer._lexeme_start_p);

__QUEX_IF_COUNT_COLUMNS(reference_p = character_begin_p);

_254:
    input = *(me->buffer._read_p);


    __quex_debug_state(653);
if     ( input >= 0xE000 )  goto _223;
else if( input >= 0xDC00 )  goto _226;
else if( input >= 0x1 )     goto _223;
else                        goto _237;


    __quex_assert_no_passage();
_228:
    /* (653 from 647)  */
    ++(me->buffer._read_p);

    goto _254;

    /* (*) Terminal states _______________________________________________________
     *
     * States that implement actions of the 'winner patterns.                     */
_243:
    __quex_debug("* TERMINAL LINE\n");
__QUEX_IF_COUNT_LINES_ADD((size_t)1);

    __QUEX_IF_COUNT_COLUMNS((me->counter._column_number_at_end) = (size_t)1);

__QUEX_IF_COUNT_COLUMNS(reference_p = (me->buffer._read_p));

goto _238;

_244:
    __quex_debug("* TERMINAL GRID\n");
__QUEX_IF_COUNT_COLUMNS_ADD((size_t)(((me->buffer._read_p) - reference_p - 1)));

__QUEX_IF_COUNT_COLUMNS(self.counter._column_number_at_end -= 1);
__QUEX_IF_COUNT_COLUMNS(self.counter._column_number_at_end &= ~ ((size_t)0x3));
__QUEX_IF_COUNT_COLUMNS(self.counter._column_number_at_end += 4 + 1);

__QUEX_IF_COUNT_COLUMNS(reference_p = (me->buffer._read_p));

goto _238;

_242:
    __quex_debug("* TERMINAL COLUMN\n");
goto _238;

_245:
    __quex_debug("* TERMINAL <BEYOND>\n");
    (me->buffer._read_p) = character_begin_p;

__QUEX_IF_COUNT_COLUMNS_ADD((size_t)((character_begin_p - reference_p)));

goto _2;

if(0) {
    /* Avoid unreferenced labels. */
    goto _243;
    goto _244;
    goto _242;
    goto _245;
}

_145:
    __quex_debug("* TERMINAL <skip>\n");
__QUEX_IF_COUNT_SHIFT_VALUES();
__QUEX_IF_COUNT_LINES_ADD(1);
__QUEX_IF_COUNT_COLUMNS_SET(1);
{

#   line 23 "lexer.quex"
goto _0;

#   line 3331 "DerivLexer.cpp"

}
goto _1;
_146:
    __quex_debug("* TERMINAL <skip>\n");
__QUEX_IF_COUNT_SHIFT_VALUES();
__QUEX_IF_COUNT_COLUMNS(self.counter._column_number_at_end -= 1);
__QUEX_IF_COUNT_COLUMNS(self.counter._column_number_at_end -= (self.counter._column_number_at_end % (4)));
__QUEX_IF_COUNT_COLUMNS(self.counter._column_number_at_end += 4 + 1);

{

#   line 23 "lexer.quex"
goto _0;

#   line 3347 "DerivLexer.cpp"

}
goto _1;
_144:
    __quex_debug("* TERMINAL <skip>\n");
__QUEX_IF_COUNT_SHIFT_VALUES();
__QUEX_IF_COUNT_COLUMNS_ADD(1);
{

#   line 23 "lexer.quex"
goto _0;

#   line 3360 "DerivLexer.cpp"

}
goto _1;
_132:
    __quex_debug("* TERMINAL \"*\"\n");
__QUEX_IF_COUNT_SHIFT_VALUES();
__QUEX_IF_COUNT_COLUMNS_ADD(1);
{

#   line 28 "lexer.quex"
 self_send(token::KW_MUL); return; 

#   line 3373 "DerivLexer.cpp"

}
goto _1;
_149:
    __quex_debug("* TERMINAL \"/\"\n");
__QUEX_IF_COUNT_SHIFT_VALUES();
__QUEX_IF_COUNT_COLUMNS_ADD(1);
{

#   line 29 "lexer.quex"
 self_send(token::KW_DIV); return; 

#   line 3386 "DerivLexer.cpp"

}
goto _1;
_131:
    __quex_debug("* TERMINAL \"+\"\n");
__QUEX_IF_COUNT_SHIFT_VALUES();
__QUEX_IF_COUNT_COLUMNS_ADD(1);
{

#   line 30 "lexer.quex"
 self_send(token::KW_PLUS); return; 

#   line 3399 "DerivLexer.cpp"

}
goto _1;
_147:
    __quex_debug("* TERMINAL \"-\"\n");
__QUEX_IF_COUNT_SHIFT_VALUES();
__QUEX_IF_COUNT_COLUMNS_ADD(1);
{

#   line 31 "lexer.quex"
 self_send(token::KW_MINUS); return; 

#   line 3412 "DerivLexer.cpp"

}
goto _1;
_135:
    __quex_debug("* TERMINAL \"^\"\n");
__QUEX_IF_COUNT_SHIFT_VALUES();
__QUEX_IF_COUNT_COLUMNS_ADD(1);
{

#   line 32 "lexer.quex"
 self_send(token::KW_POWER); return; 

#   line 3425 "DerivLexer.cpp"

}
goto _1;
_138:
    __quex_debug("* TERMINAL \"e\"\n");
__QUEX_IF_COUNT_SHIFT_VALUES();
__QUEX_IF_COUNT_COLUMNS_ADD(1);
{

#   line 33 "lexer.quex"
 self_send(token::KW_E_IDENTIFIER); return; 

#   line 3438 "DerivLexer.cpp"

}
goto _1;
_141:
    __quex_debug("* TERMINAL \"π\"\n");
__QUEX_IF_COUNT_SHIFT_VALUES();
__QUEX_IF_COUNT_COLUMNS_ADD(1);
{

#   line 34 "lexer.quex"
 self_send(token::KW_PI_IDENTIFIER); return; 

#   line 3451 "DerivLexer.cpp"

}
goto _1;
_134:
    __quex_debug("* TERMINAL \".\"\n");
__QUEX_IF_COUNT_SHIFT_VALUES();
__QUEX_IF_COUNT_COLUMNS_ADD(1);
{

#   line 35 "lexer.quex"
 self_send(token::KW_DOT); return; 

#   line 3464 "DerivLexer.cpp"

}
goto _1;
_133:
    __quex_debug("* TERMINAL \"(\"\n");
__QUEX_IF_COUNT_SHIFT_VALUES();
__QUEX_IF_COUNT_COLUMNS_ADD(1);
{

#   line 36 "lexer.quex"
 self_send(token::KW_LPAREN); return; 

#   line 3477 "DerivLexer.cpp"

}
goto _1;
_150:
    __quex_debug("* TERMINAL \")\"\n");
__QUEX_IF_COUNT_SHIFT_VALUES();
__QUEX_IF_COUNT_COLUMNS_ADD(1);
{

#   line 37 "lexer.quex"
 self_send(token::KW_RPAREN); return; 

#   line 3490 "DerivLexer.cpp"

}
goto _1;
_129:
    __quex_debug("* TERMINAL \"cos\"\n");
__QUEX_IF_COUNT_SHIFT_VALUES();
__QUEX_IF_COUNT_COLUMNS_ADD(3);
{

#   line 38 "lexer.quex"
 self_send(token::KW_COS); return; 

#   line 3503 "DerivLexer.cpp"

}
goto _1;
_140:
    __quex_debug("* TERMINAL \"sin\"\n");
__QUEX_IF_COUNT_SHIFT_VALUES();
__QUEX_IF_COUNT_COLUMNS_ADD(3);
{

#   line 39 "lexer.quex"
 self_send(token::KW_SIN); return; 

#   line 3516 "DerivLexer.cpp"

}
goto _1;
_136:
    __quex_debug("* TERMINAL \"tan\"\n");
__QUEX_IF_COUNT_SHIFT_VALUES();
__QUEX_IF_COUNT_COLUMNS_ADD(3);
{

#   line 40 "lexer.quex"
 self_send(token::KW_TAN); return; 

#   line 3529 "DerivLexer.cpp"

}
goto _1;
_130:
    __quex_debug("* TERMINAL [:digit:]+\n");
__QUEX_IF_COUNT_SHIFT_VALUES();
__QUEX_IF_COUNT_COLUMNS_ADD(LexemeL);
QUEX_LEXEME_TERMINATING_ZERO_SET(&me->buffer);
{

#   line 41 "lexer.quex"
 self_send1(token::KW_NUMBERS, Lexeme); return; 

#   line 3543 "DerivLexer.cpp"

}
goto _1;
_128:
    __quex_debug("* TERMINAL {LATIN_IDENTIFIER}\n");
__QUEX_IF_COUNT_SHIFT_VALUES();
__QUEX_IF_COUNT_COLUMNS_ADD(LexemeL);
QUEX_LEXEME_TERMINATING_ZERO_SET(&me->buffer);
{

#   line 42 "lexer.quex"
 self_send1(token::KW_IDENTIFIER, Lexeme); return; 

#   line 3557 "DerivLexer.cpp"

}
goto _1;
_148:
    __quex_debug("* TERMINAL {GREEK_IDENTIFIER}\n");
__QUEX_IF_COUNT_SHIFT_VALUES();
__QUEX_IF_COUNT_COLUMNS_ADD(LexemeL);
QUEX_LEXEME_TERMINATING_ZERO_SET(&me->buffer);
{

#   line 43 "lexer.quex"
 self_send1(token::KW_CONSTANTS_IDENTIFIER, Lexeme); return; 

#   line 3571 "DerivLexer.cpp"

}
goto _1;
_142:
    __quex_debug("* TERMINAL [:digit:]+\"\\.\"[:digit:]*([Ee]([+\\-]){0,1}[:digit:]+){0,1}\n");
__QUEX_IF_COUNT_SHIFT_VALUES();
__QUEX_IF_COUNT_COLUMNS_ADD(LexemeL);
QUEX_LEXEME_TERMINATING_ZERO_SET(&me->buffer);
{

#   line 45 "lexer.quex"
 self_send1(token::KW_DOUBLE_LITERAL, Lexeme); return; 

#   line 3585 "DerivLexer.cpp"

}
goto _1;
_137:
    __quex_debug("* TERMINAL [:digit:]+[Ee]([+\\-]){0,1}[:digit:]+\n");
__QUEX_IF_COUNT_SHIFT_VALUES();
__QUEX_IF_COUNT_COLUMNS_ADD(LexemeL);
QUEX_LEXEME_TERMINATING_ZERO_SET(&me->buffer);
{

#   line 46 "lexer.quex"
 self_send1(token::KW_DOUBLE_LITERAL, Lexeme); return; 

#   line 3599 "DerivLexer.cpp"

}
goto _1;
_139:
    __quex_debug("* TERMINAL (\"\\.\"[:digit:]+)([Ee]([+\\-]){0,1}[:digit:]+){0,1}\n");
__QUEX_IF_COUNT_SHIFT_VALUES();
__QUEX_IF_COUNT_COLUMNS_ADD(LexemeL);
QUEX_LEXEME_TERMINATING_ZERO_SET(&me->buffer);
{

#   line 47 "lexer.quex"
 self_send1(token::KW_DOUBLE_LITERAL, Lexeme); return; 

#   line 3613 "DerivLexer.cpp"

}
goto _1;
if(0) {
    /* Avoid unreferenced labels. */
    goto _221;
    goto _70;
    goto _143;
    goto _0;
    goto _145;
    goto _146;
    goto _144;
    goto _132;
    goto _149;
    goto _131;
    goto _147;
    goto _135;
    goto _138;
    goto _141;
    goto _134;
    goto _133;
    goto _150;
    goto _129;
    goto _140;
    goto _136;
    goto _130;
    goto _128;
    goto _148;
    goto _142;
    goto _137;
    goto _139;
}
#   ifndef QUEX_OPTION_COMPUTED_GOTOS
    __quex_assert_no_passage();
_258:
    switch( target_state_index ) {
        case 4: { goto _4; }
        case 45: { goto _45; }
        case 47: { goto _47; }
        case 51: { goto _51; }
        case 52: { goto _52; }
        case 54: { goto _54; }
        case 56: { goto _56; }
        case 58: { goto _58; }
        case 59: { goto _59; }
        case 60: { goto _60; }
        case 61: { goto _61; }
        case 62: { goto _62; }
        case 63: { goto _63; }
        case 64: { goto _64; }
        case 65: { goto _65; }
        case 66: { goto _66; }
        case 67: { goto _67; }
        case 68: { goto _68; }
        case 69: { goto _69; }
        case 70: { goto _70; }
        case 72: { goto _72; }
        case 74: { goto _74; }
        case 76: { goto _76; }
        case 78: { goto _78; }
        case 80: { goto _80; }
        case 82: { goto _82; }
        case 84: { goto _84; }
        case 86: { goto _86; }
        case 88: { goto _88; }
        case 90: { goto _90; }
        case 92: { goto _92; }
        case 94: { goto _94; }
        case 96: { goto _96; }
        case 98: { goto _98; }
        case 100: { goto _100; }
        case 102: { goto _102; }
        case 104: { goto _104; }
        case 106: { goto _106; }
        case 108: { goto _108; }
        case 110: { goto _110; }
        case 112: { goto _112; }
        case 114: { goto _114; }
        case 116: { goto _116; }
        case 118: { goto _118; }
        case 120: { goto _120; }
        case 122: { goto _122; }
        case 234: { goto _234; }
        case 236: { goto _236; }

        default:
            __QUEX_STD_fprintf(stderr, "State router: index = %i\n", (int)target_state_index);
            QUEX_ERROR_EXIT("State router: unknown index.\n");
    }
#   endif /* QUEX_OPTION_COMPUTED_GOTOS */


    __quex_assert_no_passage();
_237:
    /* (RELOAD_FORWARD from 653)  */
    target_state_index = QUEX_LABEL(236); target_state_else_index = QUEX_LABEL(70);

_256:
    (me->buffer._lexeme_start_p) = character_begin_p;

__QUEX_IF_COUNT_COLUMNS_ADD((size_t)((character_begin_p - reference_p)));

_255:
    __quex_debug3("RELOAD_FORWARD: success->%i; failure->%i", (int)target_state_index, (int)target_state_else_index);
    __quex_assert(*(me->buffer._read_p) == QUEX_SETTING_BUFFER_LIMIT_CODE);
    /* Detect whether the buffer limit code appeared at non-border.          */
    if( me->buffer._read_p != me->buffer.input.end_p ) {
        __quex_assert(false); /* Later: on codec error! */
    }
    __quex_debug_reload_before();                 /* Report source position. */
    if( QUEX_NAME(Buffer_load_forward)(&me->buffer, (QUEX_TYPE_LEXATOM**)position, PositionRegisterN) ) {
        __quex_debug_reload_after();
        QUEX_GOTO_STATE(target_state_index);      /* may use 'computed goto' */
    }
    __quex_debug("reload impossible\n");
    QUEX_GOTO_STATE(target_state_else_index);     /* may use 'computed goto' */


    __quex_assert_no_passage();
_113:
    /* (RELOAD_FORWARD from 575)  */
    target_state_index = QUEX_LABEL(112); target_state_else_index = QUEX_LABEL(65);

    goto _255;


    __quex_assert_no_passage();
_77:
    /* (RELOAD_FORWARD from 551)  */
    target_state_index = QUEX_LABEL(76); target_state_else_index = QUEX_LABEL(47);

    goto _255;


    __quex_assert_no_passage();
_123:
    /* (RELOAD_FORWARD from 580)  */
    target_state_index = QUEX_LABEL(122); target_state_else_index = QUEX_LABEL(69);

    goto _255;


    __quex_assert_no_passage();
_105:
    /* (RELOAD_FORWARD from 571)  */
    target_state_index = QUEX_LABEL(104); target_state_else_index = QUEX_LABEL(64);

    goto _255;


    __quex_assert_no_passage();
_101:
    /* (RELOAD_FORWARD from 569)  */
    target_state_index = QUEX_LABEL(100); target_state_else_index = QUEX_LABEL(62);

    goto _255;


    __quex_assert_no_passage();
_83:
    /* (RELOAD_FORWARD from 557)  */
    target_state_index = QUEX_LABEL(82); target_state_else_index = QUEX_LABEL(52);

    goto _255;


    __quex_assert_no_passage();
_93:
    /* (RELOAD_FORWARD from 565)  */
    target_state_index = QUEX_LABEL(92); target_state_else_index = QUEX_LABEL(58);

    goto _255;


    __quex_assert_no_passage();
_111:
    /* (RELOAD_FORWARD from 574)  */
    target_state_index = QUEX_LABEL(110); target_state_else_index = QUEX_LABEL(66);

    goto _255;


    __quex_assert_no_passage();
_75:
    /* (RELOAD_FORWARD from 549)  */
    target_state_index = QUEX_LABEL(74); target_state_else_index = QUEX_LABEL(45);

    goto _255;


    __quex_assert_no_passage();
_121:
    /* (RELOAD_FORWARD from 579)  */
    target_state_index = QUEX_LABEL(120); target_state_else_index = QUEX_LABEL(45);

    goto _255;


    __quex_assert_no_passage();
_103:
    /* (RELOAD_FORWARD from 570)  */
    target_state_index = QUEX_LABEL(102); target_state_else_index = QUEX_LABEL(63);

    goto _255;


    __quex_assert_no_passage();
_99:
    /* (RELOAD_FORWARD from 568)  */
    target_state_index = QUEX_LABEL(98); target_state_else_index = QUEX_LABEL(61);

    goto _255;


    __quex_assert_no_passage();
_81:
    /* (RELOAD_FORWARD from 556)  */
    target_state_index = QUEX_LABEL(80); target_state_else_index = QUEX_LABEL(51);

    goto _255;


    __quex_assert_no_passage();
_91:
    /* (RELOAD_FORWARD from 564)  */
    target_state_index = QUEX_LABEL(90); target_state_else_index = QUEX_LABEL(45);

    goto _255;


    __quex_assert_no_passage();
_73:
    /* (RELOAD_FORWARD from 548)  */
    target_state_index = QUEX_LABEL(72); target_state_else_index = QUEX_LABEL(45);

    goto _255;


    __quex_assert_no_passage();
_119:
    /* (RELOAD_FORWARD from 578)  */
    target_state_index = QUEX_LABEL(118); target_state_else_index = QUEX_LABEL(68);

    goto _255;


    __quex_assert_no_passage();
_117:
    /* (RELOAD_FORWARD from 577)  */
    target_state_index = QUEX_LABEL(116); target_state_else_index = QUEX_LABEL(45);

    goto _255;


    __quex_assert_no_passage();
_97:
    /* (RELOAD_FORWARD from 567)  */
    target_state_index = QUEX_LABEL(96); target_state_else_index = QUEX_LABEL(60);

    goto _255;


    __quex_assert_no_passage();
_79:
    /* (RELOAD_FORWARD from 553)  */
    target_state_index = QUEX_LABEL(78); target_state_else_index = QUEX_LABEL(45);

    goto _255;


    __quex_assert_no_passage();
_109:
    /* (RELOAD_FORWARD from 573)  */
    target_state_index = QUEX_LABEL(108); target_state_else_index = QUEX_LABEL(65);

    goto _255;


    __quex_assert_no_passage();
_89:
    /* (RELOAD_FORWARD from 562)  */
    target_state_index = QUEX_LABEL(88); target_state_else_index = QUEX_LABEL(56);

    goto _255;


    __quex_assert_no_passage();
_71:
    /* (RELOAD_FORWARD from 544)  */
    target_state_index = QUEX_LABEL(4); target_state_else_index = QUEX_LABEL(70);

    goto _255;


    __quex_assert_no_passage();
_115:
    /* (RELOAD_FORWARD from 576)  */
    target_state_index = QUEX_LABEL(114); target_state_else_index = QUEX_LABEL(67);

    goto _255;


    __quex_assert_no_passage();
_95:
    /* (RELOAD_FORWARD from 566)  */
    target_state_index = QUEX_LABEL(94); target_state_else_index = QUEX_LABEL(59);

    goto _255;


    __quex_assert_no_passage();
_235:
    /* (RELOAD_FORWARD from 647)  */
    target_state_index = QUEX_LABEL(234); target_state_else_index = QUEX_LABEL(70);

    goto _256;


    __quex_assert_no_passage();
_107:
    /* (RELOAD_FORWARD from 572)  */
    target_state_index = QUEX_LABEL(106); target_state_else_index = QUEX_LABEL(59);

    goto _255;


    __quex_assert_no_passage();
_87:
    /* (RELOAD_FORWARD from 561)  */
    target_state_index = QUEX_LABEL(86); target_state_else_index = QUEX_LABEL(45);

    goto _255;


    __quex_assert_no_passage();
_85:
    /* (RELOAD_FORWARD from 559)  */
    target_state_index = QUEX_LABEL(84); target_state_else_index = QUEX_LABEL(54);

    goto _255;

_3:
/* RETURN -- after executing 'on_after_match' code. */
    __QUEX_PURE_RETURN;


_1:
/* CONTINUE -- after executing 'on_after_match' code. */

_2:
/* CONTINUE -- without executing 'on_after_match' (e.g. on FAILURE). */


#   ifndef __QUEX_OPTION_PLAIN_ANALYZER_OBJECT
#   ifdef  QUEX_OPTION_TOKEN_POLICY_QUEUE
    if( QUEX_NAME(TokenQueue_is_full)(&self._token_queue) ) {
        return;
    }
#   else
    if( self_token_get_id() != __QUEX_SETTING_TOKEN_ID_UNINITIALIZED) {
        return __self_result_token_id;
    }
#   endif
#   endif


    /*  If a mode change happened, then the function must first return and
     *  indicate that another mode function is to be called. At this point, 
     *  we to force a 'return' on a mode change. 
     *
     *  Pseudo Code: if( previous_mode != current_mode ) {
     *                   return 0;
     *               }
     *
     *  When the analyzer returns, the caller function has to watch if a mode 
     *  change occurred. If not it can call this function again.             */
#   if    defined(QUEX_OPTION_AUTOMATIC_ANALYSIS_CONTINUATION_ON_MODE_CHANGE)        || defined(QUEX_OPTION_ASSERTS)
    if( me->DEBUG_analyzer_function_at_entry != me->current_analyzer_function ) 
#   endif
    { 
#       if defined(QUEX_OPTION_AUTOMATIC_ANALYSIS_CONTINUATION_ON_MODE_CHANGE)
        self_token_set_id(__QUEX_SETTING_TOKEN_ID_UNINITIALIZED);
        __QUEX_PURE_RETURN;
#       elif defined(QUEX_OPTION_ASSERTS)
        QUEX_ERROR_EXIT("Mode change without immediate return from the lexical analyzer.");
#       endif
    }


goto _257;

    __quex_assert_no_passage();

    /* Following labels are referenced in macros. It cannot be detected
     * whether the macros are applied in user code or not. To avoid compiler.
     * warnings of unused labels, they are referenced in unreachable code.   */
    goto _3; /* in RETURN                */
    goto _1; /* in CONTINUE              */
    goto _2; /* in CONTINUE and skippers */
#   if ! defined(QUEX_OPTION_COMPUTED_GOTOS)
    goto _258; /* in QUEX_GOTO_STATE       */
#   endif

    /* Prevent compiler warning 'unused variable'.                           */
    (void)QUEX_LEXEME_NULL;
    (void)QUEX_NAME_TOKEN(DumpedTokenIdObject);
    /* target_state_index and target_state_else_index appear when 
     * QUEX_GOTO_STATE is used without computed goto-s.                      */
    (void)target_state_index;
    (void)target_state_else_index;

#   undef Lexeme
#   undef LexemeBegin
#   undef LexemeEnd
#   undef LexemeNull
#   undef LexemeL
#   undef MAIN
#   undef self
#   undef QUEX_LABEL_STATE_ROUTER
}
QUEX_NAMESPACE_MAIN_CLOSE


QUEX_NAMESPACE_TOKEN_OPEN

const char*
QUEX_NAME_TOKEN(map_id_to_name)(const QUEX_TYPE_TOKEN_ID TokenID)
{
   static char  error_string[64];
   static const char  uninitialized_string[] = "<UNINITIALIZED>";
   static const char  termination_string[]   = "<TERMINATION>";
#  if defined(QUEX_OPTION_INDENTATION_TRIGGER)
   static const char  indent_string[]        = "<INDENT>";
   static const char  dedent_string[]        = "<DEDENT>";
   static const char  nodent_string[]        = "<NODENT>";
#  endif
   static const char  token_id_str_CONSTANTS_IDENTIFIER[] = "CONSTANTS_IDENTIFIER";
   static const char  token_id_str_COS[]                  = "COS";
   static const char  token_id_str_DIV[]                  = "DIV";
   static const char  token_id_str_DOT[]                  = "DOT";
   static const char  token_id_str_DOUBLE_LITERAL[]       = "DOUBLE_LITERAL";
   static const char  token_id_str_E_IDENTIFIER[]         = "E_IDENTIFIER";
   static const char  token_id_str_IDENTIFIER[]           = "IDENTIFIER";
   static const char  token_id_str_LEXER_ERROR[]          = "LEXER_ERROR";
   static const char  token_id_str_LPAREN[]               = "LPAREN";
   static const char  token_id_str_MINUS[]                = "MINUS";
   static const char  token_id_str_MUL[]                  = "MUL";
   static const char  token_id_str_NUMBERS[]              = "NUMBERS";
   static const char  token_id_str_PI_IDENTIFIER[]        = "PI_IDENTIFIER";
   static const char  token_id_str_PLUS[]                 = "PLUS";
   static const char  token_id_str_POWER[]                = "POWER";
   static const char  token_id_str_RPAREN[]               = "RPAREN";
   static const char  token_id_str_SIN[]                  = "SIN";
   static const char  token_id_str_TAN[]                  = "TAN";
       

   /* NOTE: This implementation works only for token id types that are 
    *       some type of integer or enum. In case an alien type is to
    *       used, this function needs to be redefined.                  */
   switch( TokenID ) {
   default: {
       __QUEX_STD_sprintf(error_string, "<UNKNOWN TOKEN-ID: %i>", (int)TokenID);
       return error_string;
   }
   case KW_TERMINATION:    return termination_string;
   case KW_UNINITIALIZED:  return uninitialized_string;
#  if defined(QUEX_OPTION_INDENTATION_TRIGGER)
   case KW_INDENT:         return indent_string;
   case KW_DEDENT:         return dedent_string;
   case KW_NODENT:         return nodent_string;
#  endif
   case KW_CONSTANTS_IDENTIFIER: return token_id_str_CONSTANTS_IDENTIFIER;
   case KW_COS:                  return token_id_str_COS;
   case KW_DIV:                  return token_id_str_DIV;
   case KW_DOT:                  return token_id_str_DOT;
   case KW_DOUBLE_LITERAL:       return token_id_str_DOUBLE_LITERAL;
   case KW_E_IDENTIFIER:         return token_id_str_E_IDENTIFIER;
   case KW_IDENTIFIER:           return token_id_str_IDENTIFIER;
   case KW_LEXER_ERROR:          return token_id_str_LEXER_ERROR;
   case KW_LPAREN:               return token_id_str_LPAREN;
   case KW_MINUS:                return token_id_str_MINUS;
   case KW_MUL:                  return token_id_str_MUL;
   case KW_NUMBERS:              return token_id_str_NUMBERS;
   case KW_PI_IDENTIFIER:        return token_id_str_PI_IDENTIFIER;
   case KW_PLUS:                 return token_id_str_PLUS;
   case KW_POWER:                return token_id_str_POWER;
   case KW_RPAREN:               return token_id_str_RPAREN;
   case KW_SIN:                  return token_id_str_SIN;
   case KW_TAN:                  return token_id_str_TAN;

   }
}

QUEX_NAMESPACE_TOKEN_CLOSE

