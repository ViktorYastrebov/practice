start = MAIN;

header {
  //#include "tokens.hpp"
  #include "../parser/DerivParser.hpp"
  typedef yy::DerivParser::token::yytokentype token;
}

define {
  LATIN              [: intersection(\P{Script=Latin},      [\X0-\XFFFF]) :]
  GREEK              [: intersection(\P{Script=Greek},      [\X0-\XFFFF]) :] 

  LATIN_ID_START     [: intersection({LATIN}, \P{ID_Start})    :]
  LATIN_ID_CONTINUE  [: intersection({LATIN}, \P{ID_Continue}) :]
  LATIN_IDENTIFIER   {LATIN_ID_START}{LATIN_ID_CONTINUE}*

  GREEK_ID_START     [: intersection({GREEK}, \P{ID_Start})    :]
  GREEK_ID_CONTINUE  [: intersection({GREEK}, \P{ID_Continue}) :]
  GREEK_IDENTIFIER   {GREEK_ID_START}{GREEK_ID_CONTINUE}*
}

mode MAIN: 
<skip: [ \n\t]>
{
  on_end_of_stream            { self_send(token::KW_TERMINATION); return;}
  on_failure                  { self_send1(token::KW_LEXER_ERROR, Lexeme); return;}

  "*"                         { self_send(token::KW_MUL); return; }
  "/"                         { self_send(token::KW_DIV); return; }
  "+"                         { self_send(token::KW_PLUS); return; }
  "-"                         { self_send(token::KW_MINUS); return; }
  "^"                         { self_send(token::KW_POWER); return; } 
  "e"                         { self_send(token::KW_E_IDENTIFIER); return; }
  "Ï€"                         { self_send(token::KW_PI_IDENTIFIER); return; }
  "."                         { self_send(token::KW_DOT); return; }
  "("                         { self_send(token::KW_LPAREN); return; }
  ")"                         { self_send(token::KW_RPAREN); return; }
  "cos"                       { self_send(token::KW_COS); return; }
  "sin"                       { self_send(token::KW_SIN); return; }
  "tan"                       { self_send(token::KW_TAN); return; }
  [:digit:]+                  { self_send1(token::KW_NUMBERS, Lexeme); return; }
  {LATIN_IDENTIFIER}          { self_send1(token::KW_IDENTIFIER, Lexeme); return; }
  {GREEK_IDENTIFIER}          { self_send1(token::KW_CONSTANTS_IDENTIFIER, Lexeme); return; }
  
  [:digit:]+"\."[:digit:]*([Ee]([+\-]){0,1}[:digit:]+){0,1}    { self_send1(token::KW_DOUBLE_LITERAL, Lexeme); return; }
  [:digit:]+[Ee]([+\-]){0,1}[:digit:]+                         { self_send1(token::KW_DOUBLE_LITERAL, Lexeme); return; }
  ("\."[:digit:]+)([Ee]([+\-]){0,1}[:digit:]+){0,1}            { self_send1(token::KW_DOUBLE_LITERAL, Lexeme); return; }

}
